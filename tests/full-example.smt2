(declare-datatypes (local-a) ((list (nil) (cons (head local-a) (tail (list local-a))))))
(declare-datatypes () ((Nat (Z) (prod/prop_14.smt2S (p Nat)))))
(define-fun-rec le ((local-x Nat) (local-y Nat)) Bool (match local-x (case Z true) (case (prod/prop_14.smt2S local-z) (match local-y (case Z false) (case (prod/prop_14.smt2S local-x2) (le local-z local-x2))))))
(define-fun-rec sorted ((local-x (list Nat))) Bool (match local-x (case nil true) (case (cons local-y local-z) (match local-z (case nil true) (case (cons local-y2 local-xs) (and (le local-y local-y2) (sorted local-z)))))))
(define-fun-rec prod/prop_14.smt2insert2 ((local-x Nat) (local-y (list Nat))) (list Nat) (match local-y (case nil (cons local-x (as nil (list Nat)))) (case (cons local-z local-xs) (ite (le local-x local-z) (cons local-x local-y) (cons local-z (prod/prop_14.smt2insert2 local-x local-xs))))))
(define-fun-rec prod/prop_14.smt2isort ((local-x (list Nat))) (list Nat) (match local-x (case nil (as nil (list Nat))) (case (cons local-y local-xs) (prod/prop_14.smt2insert2 local-y (prod/prop_14.smt2isort local-xs)))))
(define-fun-rec (par (local-a) (append ((local-x (list local-a)) (local-y (list local-a))) (list local-a) (match local-x (case nil local-y) (case (cons local-z local-xs) (cons local-z (append local-xs local-y)))))))
(define-fun-rec (par (local-a) (prod/prop_18.smt2rev ((local-x (list local-a))) (list local-a) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (append (prod/prop_18.smt2rev local-xs) (cons local-y (as nil (list local-a)))))))))
(define-fun-rec equal ((local-x Nat) (local-y Nat)) Bool (match local-x (case Z (match local-y (case Z true) (case (prod/prop_14.smt2S local-z) false))) (case (prod/prop_14.smt2S local-x2) (match local-y (case Z false) (case (prod/prop_14.smt2S local-y2) (equal local-x2 local-y2))))))
(define-fun-rec elem ((local-x Nat) (local-y (list Nat))) Bool (match local-y (case nil false) (case (cons local-z local-xs) (or (equal local-x local-z) (elem local-x local-xs)))))
(define-fun-rec (par (local-a) (qrev ((local-x (list local-a)) (local-y (list local-a))) (list local-a) (match local-x (case nil local-y) (case (cons local-z local-xs) (qrev local-xs (cons local-z local-y)))))))
(define-fun-rec prod/prop_25.smt2plus ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (prod/prop_14.smt2S (prod/prop_25.smt2plus local-z local-y)))))
(define-fun-rec (par (local-a) (length ((local-x (list local-a))) Nat (match local-x (case nil Z) (case (cons local-y local-xs) (prod/prop_14.smt2S (length local-xs)))))))
(define-fun-rec even ((local-x Nat)) Bool (match local-x (case Z true) (case (prod/prop_14.smt2S local-y) (match local-y (case Z false) (case (prod/prop_14.smt2S local-z) (even local-z))))))
(define-fun-rec union2 ((local-x (list Nat)) (local-y (list Nat))) (list Nat) (match local-x (case nil local-y) (case (cons local-z local-xs) (ite (elem local-z local-y) (union2 local-xs local-y) (cons local-z (union2 local-xs local-y))))))
(define-fun-rec intersect2 ((local-x (list Nat)) (local-y (list Nat))) (list Nat) (match local-x (case nil (as nil (list Nat))) (case (cons local-z local-xs) (ite (elem local-z local-y) (cons local-z (intersect2 local-xs local-y)) (intersect2 local-xs local-y)))))
(define-fun-rec mult2 ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-x (case Z local-z) (case (prod/prop_14.smt2S local-x2) (mult2 local-x2 local-y (prod/prop_25.smt2plus local-y local-z)))))
(define-fun-rec mult ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-z) (prod/prop_25.smt2plus local-y (mult local-z local-y)))))
(define-fun-rec (par (local-a) (drop ((local-x Nat) (local-y (list local-a))) (list local-a) (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (match local-y (case nil (as nil (list local-a))) (case (cons local-x2 local-x3) (drop local-z local-x3))))))))
(define-fun-rec half ((local-x Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-y) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-z) (prod/prop_14.smt2S (half local-z)))))))
(define-fun-rec double ((local-x Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-y) (prod/prop_14.smt2S (prod/prop_14.smt2S (double local-y))))))
(define-fun-rec (par (local-a) (prod/prop_32.smt2rotate ((local-x Nat) (local-y (list local-a))) (list local-a) (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (match local-y (case nil (as nil (list local-a))) (case (cons local-x2 local-x3) (prod/prop_32.smt2rotate local-z (append local-x3 (cons local-x2 (as nil (list local-a))))))))))))
(define-fun unequal ((local-x Nat) (local-y Nat)) Bool (not (equal local-x local-y)))
(define-fun-rec subset2 ((local-x (list Nat)) (local-y (list Nat))) Bool (match local-x (case nil true) (case (cons local-z local-xs) (and (elem local-z local-y) (subset2 local-xs local-y)))))
(define-fun-rec count ((local-x Nat) (local-y (list Nat))) Nat (match local-y (case nil Z) (case (cons local-z local-xs) (ite (equal local-x local-z) (prod/prop_14.smt2S (count local-x local-xs)) (count local-x local-xs)))))
(define-fun-rec (par (local-a) (qrevflat ((local-x (list (list local-a))) (local-y (list local-a))) (list local-a) (match local-x (case nil local-y) (case (cons local-xs local-xss) (qrevflat local-xss (append (prod/prop_18.smt2rev local-xs) local-y)))))))
(define-fun-rec (par (local-a) (revflat ((local-x (list (list local-a)))) (list local-a) (match local-x (case nil (as nil (list local-a))) (case (cons local-xs local-xss) (append (revflat local-xss) (prod/prop_18.smt2rev local-xs)))))))
(define-fun prod/prop_35.smt2one () Nat (prod/prop_14.smt2S Z))
(define-fun-rec qexp ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-y (case Z local-z) (case (prod/prop_14.smt2S local-n) (qexp local-x local-n (mult local-x local-z)))))
(define-fun-rec exp ((local-x Nat) (local-y Nat)) Nat (match local-y (case Z (prod/prop_14.smt2S Z)) (case (prod/prop_14.smt2S local-n) (mult local-x (exp local-x local-n)))))
(define-fun-rec qfac ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (qfac local-z (mult local-x local-y)))))
(define-fun-rec fac ((local-x Nat)) Nat (match local-x (case Z (prod/prop_14.smt2S Z)) (case (prod/prop_14.smt2S local-y) (mult local-x (fac local-y)))))
(define-fun-rec zordered ((local-x (list Int))) Bool (match local-x (case nil true) (case (cons local-y local-z) (match local-z (case nil true) (case (cons local-y2 local-xs) (and (<= local-y local-y2) (zordered local-z)))))))
(define-fun-rec (par (local-a) (take ((local-x Nat) (local-y (list local-a))) (list local-a) (match local-x (case Z (as nil (list local-a))) (case (prod/prop_14.smt2S local-z) (match local-y (case nil (as nil (list local-a))) (case (cons local-x2 local-x3) (cons local-x2 (take local-z local-x3)))))))))
(define-fun-rec lmerge ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil local-y) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (ite (<= local-z local-x3) (cons local-z (lmerge local-x2 local-y)) (cons local-x3 (lmerge local-x local-x4))))))))
(define-fun-rec nmsorttd ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-x2 local-x3) (let ((local-k (half (length local-x)))) (lmerge (nmsorttd (take local-k local-x)) (nmsorttd (drop local-k local-x)))))))))
(declare-datatypes (local-a local-b) ((Pair (Pair2 (first local-a) (second local-b)))))
(define-fun-rec zcount ((local-x Int) (local-y (list Int))) Nat (match local-y (case nil Z) (case (cons local-z local-xs) (ite (= local-x local-z) (prod/prop_14.smt2S (zcount local-x local-xs)) (zcount local-x local-xs)))))
(define-fun-rec bubble ((local-x (list Int))) (Pair Bool (list Int)) (match local-x (case nil (Pair2 false (as nil (list Int)))) (case (cons local-y local-z) (match local-z (case nil (Pair2 false (cons local-y (as nil (list Int))))) (case (cons local-y2 local-xs) (ite (<= local-y local-y2) (match (bubble local-z) (case (Pair2 local-b2 local-zs) (Pair2 local-b2 (cons local-y local-zs)))) (match (bubble (cons local-y local-xs)) (case (Pair2 local-c local-ys) (Pair2 true (cons local-y2 local-ys))))))))))
(define-fun-rec bubsort ((local-x (list Int))) (list Int) (match (bubble local-x) (case (Pair2 local-c local-ys) (ite local-c (bubsort local-ys) local-x))))
(define-fun-rec (par (local-a local-b) (bind ((local-x (list local-a)) (local-y (=> local-a (list local-b)))) (list local-b) (match local-x (case nil (as nil (list local-b))) (case (cons local-z local-xs) (append (@ local-y local-z) (bind local-xs local-y)))))))
(define-fun-rec (par (local-a) (weird_concat ((local-x (list (list local-a)))) (list local-a) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xss) (match local-y (case nil (weird_concat local-xss)) (case (cons local-z local-xs) (cons local-z (weird_concat (cons local-xs local-xss))))))))))
(define-fun-rec (par (local-a) (concat2 ((local-x (list (list local-a)))) (list local-a) (match local-x (case nil (as nil (list local-a))) (case (cons local-xs local-xss) (append local-xs (concat2 local-xss)))))))
(define-fun-rec op ((local-x Nat) (local-y Nat) (local-z Nat) (local-x2 Nat)) Nat (match local-x (case Z (match local-z (case Z local-x2) (case (prod/prop_14.smt2S local-x3) (op Z local-y local-x3 (prod/prop_14.smt2S local-x2))))) (case (prod/prop_14.smt2S local-x4) (match local-z (case Z (op local-x4 local-y local-y local-x2)) (case (prod/prop_14.smt2S local-c) (op local-x local-y local-c (prod/prop_14.smt2S local-x2)))))))
(define-fun-rec acc_plus ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (acc_plus local-z (prod/prop_14.smt2S local-y)))))
(define-fun-rec acc_alt_mul ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-z) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-x2) (prod/prop_14.smt2S (acc_plus local-z (acc_plus local-x2 (acc_alt_mul local-z local-x2)))))))))
(declare-datatypes () ((Form (& (&_0 Form) (&_1 Form)) (Not (Not_0 Form)) (tip2015/propositional_Okay.smt2Var (tip2015/propositional_Okay.smt2Var_0 Int)))))
(define-fun-rec zelem ((local-x Int) (local-y (list Int))) Bool (match local-y (case nil false) (case (cons local-z local-ys) (or (= local-x local-z) (zelem local-x local-ys)))))
(define-fun-rec or2 ((local-x (list Bool))) Bool (match local-x (case nil false) (case (cons local-y local-xs) (or local-y (or2 local-xs)))))
(define-fun-rec models4 ((local-x Int) (local-y (list (Pair Int Bool)))) (list Bool) (match local-y (case nil (as nil (list Bool))) (case (cons local-z local-x2) (match local-z (case (Pair2 local-y2 local-x3) (ite local-x3 (models4 local-x local-x2) (cons (= local-x local-y2) (models4 local-x local-x2))))))))
(define-fun-rec models3 ((local-x Int) (local-y (list (Pair Int Bool)))) (list Bool) (match local-y (case nil (as nil (list Bool))) (case (cons local-z local-x2) (match local-z (case (Pair2 local-y2 local-x3) (ite local-x3 (cons (= local-x local-y2) (models3 local-x local-x2)) (models3 local-x local-x2)))))))
(define-fun-rec (par (local-a local-b) (map2 ((local-x (=> local-a local-b)) (local-y (list local-a))) (list local-b) (match local-y (case nil (as nil (list local-b))) (case (cons local-z local-xs) (cons (@ local-x local-z) (map2 local-x local-xs)))))))
(define-fun (par (local-a local-b) (fst ((local-x (Pair local-a local-b))) local-a (match local-x (case (Pair2 local-y local-z) local-y)))))
(define-fun-rec okay ((local-x (list (Pair Int Bool)))) Bool (match local-x (case nil true) (case (cons local-y local-m) (match local-y (case (Pair2 local-z local-c) (and (not (zelem local-z (map2 (lambda ((local-x2 (Pair Int Bool))) (fst local-x2)) local-m))) (okay local-m)))))))
(define-fun-rec (par (local-a) (filter ((local-x (=> local-a Bool)) (local-y (list local-a))) (list local-a) (match local-y (case nil (as nil (list local-a))) (case (cons local-z local-xs) (ite (@ local-x local-z) (cons local-z (filter local-x local-xs)) (filter local-x local-xs)))))))
(define-funs-rec ((tip2015/propositional_Okay.smt2models ((local-x Form) (local-y (list (Pair Int Bool)))) (list (list (Pair Int Bool)))) (tip2015/propositional_Okay.smt2models2 ((local-q Form) (local-x (list (list (Pair Int Bool))))) (list (list (Pair Int Bool)))) (tip2015/propositional_Okay.smt2models5 ((local-q Form) (local-x (list (list (Pair Int Bool)))) (local-y (list (list (Pair Int Bool))))) (list (list (Pair Int Bool))))) ((match local-x (case (& local-p local-q) (tip2015/propositional_Okay.smt2models2 local-q (tip2015/propositional_Okay.smt2models local-p local-y))) (case (Not local-z) (match local-z (case (& local-p2 local-q2) (append (tip2015/propositional_Okay.smt2models (Not local-p2) local-y) (tip2015/propositional_Okay.smt2models (& local-p2 (Not local-q2)) local-y))) (case (Not local-p3) (tip2015/propositional_Okay.smt2models local-p3 local-y)) (case (tip2015/propositional_Okay.smt2Var local-x2) (ite (not (or2 (models3 local-x2 local-y))) (cons (cons (Pair2 local-x2 false) (filter (lambda ((local-x3 (Pair Int Bool))) (distinct local-x2 (fst local-x3))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool)))))))) (case (tip2015/propositional_Okay.smt2Var local-x4) (ite (not (or2 (models4 local-x4 local-y))) (cons (cons (Pair2 local-x4 true) (filter (lambda ((local-x5 (Pair Int Bool))) (distinct local-x4 (fst local-x5))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool))))))) (match local-x (case nil (as nil (list (list (Pair Int Bool))))) (case (cons local-y local-z) (tip2015/propositional_Okay.smt2models5 local-q local-z (tip2015/propositional_Okay.smt2models local-q local-y)))) (match local-y (case nil (tip2015/propositional_Okay.smt2models2 local-q local-x)) (case (cons local-z local-x2) (cons local-z (tip2015/propositional_Okay.smt2models5 local-q local-x local-x2))))))
(define-fun-rec (par (local-a) (all ((local-x (=> local-a Bool)) (local-y (list local-a))) Bool (match local-y (case nil true) (case (cons local-z local-xs) (and (@ local-x local-z) (all local-x local-xs)))))))
(declare-datatypes (local-a) ((tip2015/tree_sort_SortPermutes.smt2Tree (tip2015/tree_sort_SortPermutes.smt2Node (tip2015/tree_sort_SortPermutes.smt2Node_0 (tip2015/tree_sort_SortPermutes.smt2Tree local-a)) (tip2015/tree_sort_SortPermutes.smt2Node_1 local-a) (tip2015/tree_sort_SortPermutes.smt2Node_2 (tip2015/tree_sort_SortPermutes.smt2Tree local-a))) (tip2015/tree_sort_SortPermutes.smt2Nil))))
(define-fun-rec (par (local-a) (flatten ((local-x (tip2015/tree_sort_SortPermutes.smt2Tree local-a)) (local-y (list local-a))) (list local-a) (match local-x (case (tip2015/tree_sort_SortPermutes.smt2Node local-q local-z local-q2) (flatten local-q (cons local-z (flatten local-q2 local-y)))) (case tip2015/tree_sort_SortPermutes.smt2Nil local-y)))))
(define-fun-rec tip2015/tree_sort_SortPermutes.smt2add ((local-x Nat) (local-y (tip2015/tree_sort_SortPermutes.smt2Tree Nat))) (tip2015/tree_sort_SortPermutes.smt2Tree Nat) (match local-y (case (tip2015/tree_sort_SortPermutes.smt2Node local-q local-z local-q2) (ite (le local-x local-z) (tip2015/tree_sort_SortPermutes.smt2Node (tip2015/tree_sort_SortPermutes.smt2add local-x local-q) local-z local-q2) (tip2015/tree_sort_SortPermutes.smt2Node local-q local-z (tip2015/tree_sort_SortPermutes.smt2add local-x local-q2)))) (case tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Node (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Nat)) local-x (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Nat))))))
(define-fun-rec tip2015/tree_sort_SortPermutes.smt2toTree ((local-x (list Nat))) (tip2015/tree_sort_SortPermutes.smt2Tree Nat) (match local-x (case nil (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Nat))) (case (cons local-y local-xs) (tip2015/tree_sort_SortPermutes.smt2add local-y (tip2015/tree_sort_SortPermutes.smt2toTree local-xs)))))
(define-fun tip2015/tree_sort_SortPermutes.smt2tsort ((local-x (list Nat))) (list Nat) (flatten (tip2015/tree_sort_SortPermutes.smt2toTree local-x) (as nil (list Nat))))
(define-fun-rec pairwise ((local-x (list (list Int)))) (list (list Int)) (match local-x (case nil (as nil (list (list Int)))) (case (cons local-xs local-y) (match local-y (case nil (cons local-xs (as nil (list (list Int))))) (case (cons local-ys local-xss) (cons (lmerge local-xs local-ys) (pairwise local-xss)))))))
(define-fun-rec mergingbu ((local-x (list (list Int)))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-xs local-y) (match local-y (case nil local-xs) (case (cons local-z local-x2) (mergingbu (pairwise local-x)))))))
(define-fun msortbu ((local-x (list Int))) (list Int) (mergingbu (map2 (lambda ((local-y Int)) (cons local-y (as nil (list Int)))) local-x)))
(define-fun-rec tip2015/sort_MSortBUIsSort.smt2insert2 ((local-x Int) (local-y (list Int))) (list Int) (match local-y (case nil (cons local-x (as nil (list Int)))) (case (cons local-z local-xs) (ite (<= local-x local-z) (cons local-x local-y) (cons local-z (tip2015/sort_MSortBUIsSort.smt2insert2 local-x local-xs))))))
(define-fun-rec tip2015/sort_MSortBUIsSort.smt2isort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-xs) (tip2015/sort_MSortBUIsSort.smt2insert2 local-y (tip2015/sort_MSortBUIsSort.smt2isort local-xs)))))
(define-fun-rec lt ((local-x Nat) (local-y Nat)) Bool (match local-y (case Z false) (case (prod/prop_14.smt2S local-z) (match local-x (case Z true) (case (prod/prop_14.smt2S local-n) (lt local-n local-z))))))
(define-fun-rec (par (local-a) (flatten3 ((local-x (tip2015/tree_sort_SortPermutes.smt2Tree local-a))) (list local-a) (match local-x (case (tip2015/tree_sort_SortPermutes.smt2Node local-y local-z local-r) (match local-y (case (tip2015/tree_sort_SortPermutes.smt2Node local-p local-x2 local-q) (flatten3 (tip2015/tree_sort_SortPermutes.smt2Node local-p local-x2 (tip2015/tree_sort_SortPermutes.smt2Node local-q local-z local-r)))) (case tip2015/tree_sort_SortPermutes.smt2Nil (cons local-z (flatten3 local-r))))) (case tip2015/tree_sort_SortPermutes.smt2Nil (as nil (list local-a)))))))
(define-fun-rec (par (local-a) (flatten0 ((local-x (tip2015/tree_sort_SortPermutes.smt2Tree local-a))) (list local-a) (match local-x (case (tip2015/tree_sort_SortPermutes.smt2Node local-p local-y local-q) (append (append (flatten0 local-p) (cons local-y (as nil (list local-a)))) (flatten0 local-q))) (case tip2015/tree_sort_SortPermutes.smt2Nil (as nil (list local-a)))))))
(define-fun-rec add3acc ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-x (case Z (match local-y (case Z local-z) (case (prod/prop_14.smt2S local-y2) (add3acc Z local-y2 (prod/prop_14.smt2S local-z))))) (case (prod/prop_14.smt2S local-x2) (add3acc local-x2 (prod/prop_14.smt2S local-y) local-z))))
(define-fun-rec mul2 ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-z) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-x2) (prod/prop_14.smt2S (add3acc local-z local-x2 (mul2 local-z local-x2))))))))
(define-fun-rec twoThirds ((local-x Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-y) (match local-y (case Z (prod/prop_14.smt2S Z)) (case (prod/prop_14.smt2S local-z) (match local-z (case Z (prod/prop_14.smt2S Z)) (case (prod/prop_14.smt2S local-n) (prod/prop_14.smt2S (prod/prop_14.smt2S (twoThirds local-n))))))))))
(define-fun-rec third ((local-x Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-y) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-z) (match local-z (case Z Z) (case (prod/prop_14.smt2S local-n) (prod/prop_14.smt2S (third local-n)))))))))
(define-fun sort2 ((local-x Int) (local-y Int)) (list Int) (ite (<= local-x local-y) (cons local-x (cons local-y (as nil (list Int)))) (cons local-y (cons local-x (as nil (list Int))))))
(define-fun (par (local-a) (splitAt ((local-x Nat) (local-y (list local-a))) (Pair (list local-a) (list local-a)) (Pair2 (take local-x local-y) (drop local-x local-y)))))
(define-funs-rec ((tip2015/sort_NStoogeSort2IsSort.smt2nstooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2IsSort.smt2nstoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2IsSort.smt2nstooge2sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (twoThirds (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSort2IsSort.smt2nstoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSort2IsSort.smt2nstooge2sort2 (tip2015/sort_NStoogeSort2IsSort.smt2nstooge2sort1 (tip2015/sort_NStoogeSort2IsSort.smt2nstooge2sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSort2IsSort.smt2nstoogesort2 local-zs))))))
(declare-datatypes () ((It (tip2015/relaxedprefix_is_prefix_2.smt2A) (tip2015/relaxedprefix_is_prefix_2.smt2B) (tip2015/relaxedprefix_is_prefix_2.smt2C))))
(define-fun eq ((local-x It) (local-y It)) Bool (match local-x (case tip2015/relaxedprefix_is_prefix_2.smt2A (match local-y (case default false) (case tip2015/relaxedprefix_is_prefix_2.smt2A true))) (case tip2015/relaxedprefix_is_prefix_2.smt2B (match local-y (case default false) (case tip2015/relaxedprefix_is_prefix_2.smt2B true))) (case tip2015/relaxedprefix_is_prefix_2.smt2C (match local-y (case default false) (case tip2015/relaxedprefix_is_prefix_2.smt2C true)))))
(define-fun-rec isPrefix ((local-x (list It)) (local-y (list It))) Bool (match local-x (case nil true) (case (cons local-z local-x2) (match local-y (case nil false) (case (cons local-x3 local-x4) (and (eq local-z local-x3) (isPrefix local-x2 local-x4)))))))
(define-fun-rec isRelaxedPrefix ((local-x (list It)) (local-y (list It))) Bool (match local-x (case nil true) (case (cons local-z local-x2) (match local-x2 (case nil true) (case (cons local-x3 local-x4) (match local-y (case nil false) (case (cons local-x5 local-x6) (ite (eq local-z local-x5) (isRelaxedPrefix local-x2 local-x6) (isPrefix local-x2 local-y)))))))))
(define-fun-rec add3 ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-x (case Z (match local-y (case Z local-z) (case (prod/prop_14.smt2S local-y2) (prod/prop_14.smt2S (add3 Z local-y2 local-z))))) (case (prod/prop_14.smt2S local-x2) (prod/prop_14.smt2S (add3 local-x2 local-y local-z)))))
(define-fun-rec mul3 ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-x2) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-x3) (match local-z (case Z Z) (case (prod/prop_14.smt2S local-x4) (match local-x2 (case Z (match local-x3 (case Z (match local-x4 (case Z (prod/prop_14.smt2S Z)) (case (prod/prop_14.smt2S local-x5) (prod/prop_14.smt2S (add3 (mul3 Z Z local-x4) (add3 (mul3 (prod/prop_14.smt2S Z) Z local-x4) (mul3 Z (prod/prop_14.smt2S Z) local-x4) (mul3 Z Z (prod/prop_14.smt2S Z))) (add3 Z Z local-x4)))))) (case (prod/prop_14.smt2S local-x6) (prod/prop_14.smt2S (add3 (mul3 Z local-x3 local-x4) (add3 (mul3 (prod/prop_14.smt2S Z) local-x3 local-x4) (mul3 Z (prod/prop_14.smt2S Z) local-x4) (mul3 Z local-x3 (prod/prop_14.smt2S Z))) (add3 Z local-x3 local-x4)))))) (case (prod/prop_14.smt2S local-x7) (prod/prop_14.smt2S (add3 (mul3 local-x2 local-x3 local-x4) (add3 (mul3 (prod/prop_14.smt2S Z) local-x3 local-x4) (mul3 local-x2 (prod/prop_14.smt2S Z) local-x4) (mul3 local-x2 local-x3 (prod/prop_14.smt2S Z))) (add3 local-x2 local-x3 local-x4))))))))))))
(define-fun-rec zdelete ((local-x Int) (local-y (list Int))) (list Int) (match local-y (case nil (as nil (list Int))) (case (cons local-z local-ys) (ite (= local-x local-z) local-ys (cons local-z (zdelete local-x local-ys))))))
(define-fun-rec ssort_minimum ((local-x Int) (local-y (list Int))) Int (match local-y (case nil local-x) (case (cons local-z local-ys) (ite (<= local-z local-x) (ssort_minimum local-z local-ys) (ssort_minimum local-x local-ys)))))
(define-fun-rec ssort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-ys) (let ((local-m (ssort_minimum local-y local-ys))) (cons local-m (ssort (zdelete local-m local-x)))))))
(declare-datatypes () ((tip2015/regexp_RecEps.smt2A (tip2015/regexp_RecEps.smt2X) (tip2015/regexp_RecEps.smt2Y))))
(declare-datatypes () ((tip2015/regexp_RecEps.smt2R (tip2015/regexp_RecEps.smt2Nil) (Eps) (Atom (Atom_0 tip2015/regexp_RecEps.smt2A)) (tip2015/regexp_RecEps.smt2Plus (tip2015/regexp_RecEps.smt2Plus_0 tip2015/regexp_RecEps.smt2R) (tip2015/regexp_RecEps.smt2Plus_1 tip2015/regexp_RecEps.smt2R)) (tip2015/regexp_RecEps.smt2Seq (Seq_0 tip2015/regexp_RecEps.smt2R) (Seq_1 tip2015/regexp_RecEps.smt2R)) (Star (Star_0 tip2015/regexp_RecEps.smt2R)))))
(define-fun seq ((local-x tip2015/regexp_RecEps.smt2R) (local-y tip2015/regexp_RecEps.smt2R)) tip2015/regexp_RecEps.smt2R (match local-x (case default (match local-y (case default (match local-x (case default (match local-y (case default (tip2015/regexp_RecEps.smt2Seq local-x local-y)) (case Eps local-x))) (case Eps local-y))) (case tip2015/regexp_RecEps.smt2Nil tip2015/regexp_RecEps.smt2Nil))) (case tip2015/regexp_RecEps.smt2Nil tip2015/regexp_RecEps.smt2Nil)))
(define-fun tip2015/regexp_RecEps.smt2plus ((local-x tip2015/regexp_RecEps.smt2R) (local-y tip2015/regexp_RecEps.smt2R)) tip2015/regexp_RecEps.smt2R (match local-x (case default (match local-y (case default (tip2015/regexp_RecEps.smt2Plus local-x local-y)) (case tip2015/regexp_RecEps.smt2Nil local-x))) (case tip2015/regexp_RecEps.smt2Nil local-y)))
(define-fun (par (local-a) (null ((local-x (list local-a))) Bool (match local-x (case nil true) (case (cons local-y local-z) false)))))
(define-fun eqA ((local-x tip2015/regexp_RecEps.smt2A) (local-y tip2015/regexp_RecEps.smt2A)) Bool (match local-x (case tip2015/regexp_RecEps.smt2X (match local-y (case tip2015/regexp_RecEps.smt2X true) (case tip2015/regexp_RecEps.smt2Y false))) (case tip2015/regexp_RecEps.smt2Y (match local-y (case tip2015/regexp_RecEps.smt2X false) (case tip2015/regexp_RecEps.smt2Y true)))))
(define-fun-rec eps ((local-x tip2015/regexp_RecEps.smt2R)) Bool (match local-x (case default false) (case Eps true) (case (tip2015/regexp_RecEps.smt2Plus local-p local-q) (or (eps local-p) (eps local-q))) (case (tip2015/regexp_RecEps.smt2Seq local-p2 local-q2) (and (eps local-p2) (eps local-q2))) (case (Star local-y) true)))
(define-fun epsR ((local-x tip2015/regexp_RecEps.smt2R)) tip2015/regexp_RecEps.smt2R (ite (eps local-x) Eps tip2015/regexp_RecEps.smt2Nil))
(define-fun-rec step ((local-x tip2015/regexp_RecEps.smt2R) (local-y tip2015/regexp_RecEps.smt2A)) tip2015/regexp_RecEps.smt2R (match local-x (case default tip2015/regexp_RecEps.smt2Nil) (case (Atom local-a) (ite (eqA local-a local-y) Eps tip2015/regexp_RecEps.smt2Nil)) (case (tip2015/regexp_RecEps.smt2Plus local-p local-q) (tip2015/regexp_RecEps.smt2plus (step local-p local-y) (step local-q local-y))) (case (tip2015/regexp_RecEps.smt2Seq local-p2 local-q2) (tip2015/regexp_RecEps.smt2plus (seq (step local-p2 local-y) local-q2) (seq (epsR local-p2) (step local-q2 local-y)))) (case (Star local-p3) (seq (step local-p3 local-y) local-x))))
(define-fun-rec recognise ((local-x tip2015/regexp_RecEps.smt2R) (local-y (list tip2015/regexp_RecEps.smt2A))) Bool (match local-y (case nil (eps local-x)) (case (cons local-z local-xs) (recognise (step local-x local-z) local-xs))))
(declare-datatypes () ((Bin (One) (ZeroAnd (ZeroAnd_0 Bin)) (OneAnd (OneAnd_0 Bin)))))
(define-fun-rec s ((local-x Bin)) Bin (match local-x (case One (ZeroAnd One)) (case (ZeroAnd local-xs) (OneAnd local-xs)) (case (OneAnd local-ys) (ZeroAnd (s local-ys)))))
(define-fun-rec tip2015/bin_plus_comm.smt2plus ((local-x Bin) (local-y Bin)) Bin (match local-x (case One (s local-y)) (case (ZeroAnd local-z) (match local-y (case One (s local-x)) (case (ZeroAnd local-ys) (ZeroAnd (tip2015/bin_plus_comm.smt2plus local-z local-ys))) (case (OneAnd local-xs) (OneAnd (tip2015/bin_plus_comm.smt2plus local-z local-xs))))) (case (OneAnd local-x2) (match local-y (case One (s local-x)) (case (ZeroAnd local-zs) (OneAnd (tip2015/bin_plus_comm.smt2plus local-x2 local-zs))) (case (OneAnd local-ys2) (ZeroAnd (s (tip2015/bin_plus_comm.smt2plus local-x2 local-ys2))))))))
(define-fun-rec (par (local-a) (ztake ((local-x Int) (local-y (list local-a))) (list local-a) (ite (= local-x 0) (as nil (list local-a)) (match local-y (case nil (as nil (list local-a))) (case (cons local-z local-xs) (cons local-z (ztake (- local-x 1) local-xs))))))))
(define-fun-rec (par (local-a) (zlength ((local-x (list local-a))) Int (match local-x (case nil 0) (case (cons local-y local-xs) (+ 1 (zlength local-xs)))))))
(define-fun-rec (par (local-a) (zdrop ((local-x Int) (local-y (list local-a))) (list local-a) (ite (= local-x 0) local-y (match local-y (case nil (as nil (list local-a))) (case (cons local-z local-xs1) (zdrop (- local-x 1) local-xs1)))))))
(define-fun (par (local-a) (zsplitAt ((local-x Int) (local-y (list local-a))) (Pair (list local-a) (list local-a)) (Pair2 (ztake local-x local-y) (zdrop local-x local-y)))))
(define-funs-rec ((tip2015/sort_StoogeSort2Sorts.smt2stooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2Sorts.smt2stoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2Sorts.smt2stooge2sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (+ (* 2 (zlength local-x)) 1) 3) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSort2Sorts.smt2stoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSort2Sorts.smt2stooge2sort2 (tip2015/sort_StoogeSort2Sorts.smt2stooge2sort1 (tip2015/sort_StoogeSort2Sorts.smt2stooge2sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSort2Sorts.smt2stoogesort2 local-zs))))))
(declare-datatypes () ((Integer (tip2015/int_mul_ident_left.smt2P (P_0 Nat)) (N (N_0 Nat)))))
(define-fun toInteger ((local-x tip2015/regexp_RecEps.smt2A) (local-y Nat)) Integer (match local-x (case tip2015/regexp_RecEps.smt2X (tip2015/int_mul_ident_left.smt2P local-y)) (case tip2015/regexp_RecEps.smt2Y (match local-y (case Z (tip2015/int_mul_ident_left.smt2P Z)) (case (prod/prop_14.smt2S local-m) (N local-m))))))
(define-fun sign ((local-x Integer)) tip2015/regexp_RecEps.smt2A (match local-x (case (tip2015/int_mul_ident_left.smt2P local-y) tip2015/regexp_RecEps.smt2X) (case (N local-z) tip2015/regexp_RecEps.smt2Y)))
(define-fun opposite ((local-x tip2015/regexp_RecEps.smt2A)) tip2015/regexp_RecEps.smt2A (match local-x (case tip2015/regexp_RecEps.smt2X tip2015/regexp_RecEps.smt2Y) (case tip2015/regexp_RecEps.smt2Y tip2015/regexp_RecEps.smt2X)))
(define-fun timesSign ((local-x tip2015/regexp_RecEps.smt2A) (local-y tip2015/regexp_RecEps.smt2A)) tip2015/regexp_RecEps.smt2A (match local-x (case tip2015/regexp_RecEps.smt2X local-y) (case tip2015/regexp_RecEps.smt2Y (opposite local-y))))
(define-fun tip2015/int_mul_ident_left.smt2one () Integer (tip2015/int_mul_ident_left.smt2P (prod/prop_14.smt2S Z)))
(define-fun absVal ((local-x Integer)) Nat (match local-x (case (tip2015/int_mul_ident_left.smt2P local-n) local-n) (case (N local-m) (prod/prop_14.smt2S local-m))))
(define-fun tip2015/int_mul_ident_left.smt2times ((local-x Integer) (local-y Integer)) Integer (toInteger (timesSign (sign local-x) (sign local-y)) (mult (absVal local-x) (absVal local-y))))
(define-fun-rec tip2015/int_right_distrib.smt2minus ((local-x Nat) (local-y Nat)) Integer (match local-x (case Z (match local-y (case Z (tip2015/int_mul_ident_left.smt2P Z)) (case (prod/prop_14.smt2S local-n) (N local-n)))) (case (prod/prop_14.smt2S local-m) (match local-y (case Z (tip2015/int_mul_ident_left.smt2P local-x)) (case (prod/prop_14.smt2S local-o) (tip2015/int_right_distrib.smt2minus local-m local-o))))))
(define-fun tip2015/int_right_distrib.smt2plus ((local-x Integer) (local-y Integer)) Integer (match local-x (case (tip2015/int_mul_ident_left.smt2P local-m) (match local-y (case (tip2015/int_mul_ident_left.smt2P local-n) (tip2015/int_mul_ident_left.smt2P (prod/prop_25.smt2plus local-m local-n))) (case (N local-o) (tip2015/int_right_distrib.smt2minus local-m (prod/prop_14.smt2S local-o))))) (case (N local-m2) (match local-y (case (tip2015/int_mul_ident_left.smt2P local-n2) (tip2015/int_right_distrib.smt2minus local-n2 (prod/prop_14.smt2S local-m2))) (case (N local-n3) (N (prod/prop_14.smt2S (prod/prop_25.smt2plus local-m2 local-n3))))))))
(define-fun-rec toHeap2 ((local-x (list Int))) (list (tip2015/tree_sort_SortPermutes.smt2Tree Int)) (match local-x (case nil (as nil (list (tip2015/tree_sort_SortPermutes.smt2Tree Int)))) (case (cons local-y local-z) (cons (tip2015/tree_sort_SortPermutes.smt2Node (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int)) local-y (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (toHeap2 local-z)))))
(define-fun-rec hmerge ((local-x (tip2015/tree_sort_SortPermutes.smt2Tree Int)) (local-y (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (tip2015/tree_sort_SortPermutes.smt2Tree Int) (match local-x (case (tip2015/tree_sort_SortPermutes.smt2Node local-z local-x2 local-x3) (match local-y (case (tip2015/tree_sort_SortPermutes.smt2Node local-x4 local-x5 local-x6) (ite (<= local-x2 local-x5) (tip2015/tree_sort_SortPermutes.smt2Node (hmerge local-x3 local-y) local-x2 local-z) (tip2015/tree_sort_SortPermutes.smt2Node (hmerge local-x local-x6) local-x5 local-x4))) (case tip2015/tree_sort_SortPermutes.smt2Nil local-x))) (case tip2015/tree_sort_SortPermutes.smt2Nil local-y)))
(define-fun-rec hpairwise ((local-x (list (tip2015/tree_sort_SortPermutes.smt2Tree Int)))) (list (tip2015/tree_sort_SortPermutes.smt2Tree Int)) (match local-x (case nil (as nil (list (tip2015/tree_sort_SortPermutes.smt2Tree Int)))) (case (cons local-p local-y) (match local-y (case nil (cons local-p (as nil (list (tip2015/tree_sort_SortPermutes.smt2Tree Int))))) (case (cons local-q local-qs) (cons (hmerge local-p local-q) (hpairwise local-qs)))))))
(define-fun-rec hmerging ((local-x (list (tip2015/tree_sort_SortPermutes.smt2Tree Int)))) (tip2015/tree_sort_SortPermutes.smt2Tree Int) (match local-x (case nil (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (case (cons local-p local-y) (match local-y (case nil local-p) (case (cons local-z local-x2) (hmerging (hpairwise local-x)))))))
(define-fun tip2015/sort_HSortIsSort.smt2toHeap ((local-x (list Int))) (tip2015/tree_sort_SortPermutes.smt2Tree Int) (hmerging (toHeap2 local-x)))
(define-fun-rec tip2015/sort_HSortIsSort.smt2toList ((local-x (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (list Int) (match local-x (case (tip2015/tree_sort_SortPermutes.smt2Node local-p local-y local-q) (cons local-y (tip2015/sort_HSortIsSort.smt2toList (hmerge local-p local-q)))) (case tip2015/tree_sort_SortPermutes.smt2Nil (as nil (list Int)))))
(define-fun tip2015/sort_HSortIsSort.smt2hsort ((local-x (list Int))) (list Int) (tip2015/sort_HSortIsSort.smt2toList (tip2015/sort_HSortIsSort.smt2toHeap local-x)))
(define-fun-rec mul3acc ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-x2) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-x3) (match local-z (case Z Z) (case (prod/prop_14.smt2S local-x4) (match local-x2 (case Z (match local-x3 (case Z (match local-x4 (case Z (prod/prop_14.smt2S Z)) (case (prod/prop_14.smt2S local-x5) (prod/prop_14.smt2S (add3acc (mul3acc Z Z local-x4) (add3acc (mul3acc (prod/prop_14.smt2S Z) Z local-x4) (mul3acc Z (prod/prop_14.smt2S Z) local-x4) (mul3acc Z Z (prod/prop_14.smt2S Z))) (add3acc Z Z local-x4)))))) (case (prod/prop_14.smt2S local-x6) (prod/prop_14.smt2S (add3acc (mul3acc Z local-x3 local-x4) (add3acc (mul3acc (prod/prop_14.smt2S Z) local-x3 local-x4) (mul3acc Z (prod/prop_14.smt2S Z) local-x4) (mul3acc Z local-x3 (prod/prop_14.smt2S Z))) (add3acc Z local-x3 local-x4)))))) (case (prod/prop_14.smt2S local-x7) (prod/prop_14.smt2S (add3acc (mul3acc local-x2 local-x3 local-x4) (add3acc (mul3acc (prod/prop_14.smt2S Z) local-x3 local-x4) (mul3acc local-x2 (prod/prop_14.smt2S Z) local-x4) (mul3acc local-x2 local-x3 (prod/prop_14.smt2S Z))) (add3acc local-x2 local-x3 local-x4))))))))))))
(define-fun-rec zisPermutation ((local-x (list Int)) (local-y (list Int))) Bool (match local-x (case nil (null local-y)) (case (cons local-z local-xs) (and (zelem local-z local-y) (zisPermutation local-xs (zdelete local-z local-y))))))
(define-funs-rec ((par (local-a) (tip2015/sort_BSortPermutes.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/sort_BSortPermutes.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/sort_BSortPermutes.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/sort_BSortPermutes.smt2evens local-xs)))))
(define-fun-rec tip2015/sort_BSortPermutes.smt2pairs ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil local-y) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (append (sort2 local-z local-x3) (tip2015/sort_BSortPermutes.smt2pairs local-x2 local-x4)))))))
(define-fun stitch ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil local-y) (case (cons local-z local-xs) (cons local-z (tip2015/sort_BSortPermutes.smt2pairs local-xs local-y)))))
(define-fun-rec tip2015/sort_BSortPermutes.smt2bmerge ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (match local-x2 (case nil (match local-x4 (case nil (sort2 local-z local-x3)) (case (cons local-x5 local-x6) (stitch (tip2015/sort_BSortPermutes.smt2bmerge (tip2015/sort_BSortPermutes.smt2evens (cons local-z (as nil (list Int)))) (tip2015/sort_BSortPermutes.smt2evens local-y)) (tip2015/sort_BSortPermutes.smt2bmerge (tip2015/sort_BSortPermutes.smt2odds (cons local-z (as nil (list Int)))) (tip2015/sort_BSortPermutes.smt2odds local-y)))))) (case (cons local-x7 local-x8) (stitch (tip2015/sort_BSortPermutes.smt2bmerge (tip2015/sort_BSortPermutes.smt2evens local-x) (tip2015/sort_BSortPermutes.smt2evens local-y)) (tip2015/sort_BSortPermutes.smt2bmerge (tip2015/sort_BSortPermutes.smt2odds local-x) (tip2015/sort_BSortPermutes.smt2odds local-y))))))))))
(define-fun-rec tip2015/sort_BSortPermutes.smt2bsort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-x2 local-x3) (tip2015/sort_BSortPermutes.smt2bmerge (tip2015/sort_BSortPermutes.smt2bsort (tip2015/sort_BSortPermutes.smt2evens local-x)) (tip2015/sort_BSortPermutes.smt2bsort (tip2015/sort_BSortPermutes.smt2odds local-x))))))))
(define-fun-rec delete ((local-x Nat) (local-y (list Nat))) (list Nat) (match local-y (case nil (as nil (list Nat))) (case (cons local-z local-xs) (ite (equal local-x local-z) local-xs (cons local-z (delete local-x local-xs))))))
(define-fun-rec isPermutation ((local-x (list Nat)) (local-y (list Nat))) Bool (match local-x (case nil (null local-y)) (case (cons local-z local-xs) (and (elem local-z local-y) (isPermutation local-xs (delete local-z local-y))))))
(declare-datatypes (local-a) ((Maybe (Nothing) (Just (Just_0 local-a)))))
(declare-datatypes () ((Heap (tip2015/heap_deleteMinimum.smt2Node (tip2015/heap_deleteMinimum.smt2Node_0 Heap) (tip2015/heap_deleteMinimum.smt2Node_1 Nat) (tip2015/heap_deleteMinimum.smt2Node_2 Heap)) (tip2015/heap_deleteMinimum.smt2Nil))))
(define-fun listDeleteMinimum ((local-x (list Nat))) (Maybe (list Nat)) (match local-x (case nil (as Nothing (Maybe (list Nat)))) (case (cons local-y local-xs) (Just local-xs))))
(define-fun-rec merge ((local-x Heap) (local-y Heap)) Heap (match local-x (case (tip2015/heap_deleteMinimum.smt2Node local-z local-x2 local-x3) (match local-y (case (tip2015/heap_deleteMinimum.smt2Node local-x4 local-x5 local-x6) (ite (le local-x2 local-x5) (tip2015/heap_deleteMinimum.smt2Node (merge local-x3 local-y) local-x2 local-z) (tip2015/heap_deleteMinimum.smt2Node (merge local-x local-x6) local-x5 local-x4))) (case tip2015/heap_deleteMinimum.smt2Nil local-x))) (case tip2015/heap_deleteMinimum.smt2Nil local-y)))
(define-fun-rec tip2015/heap_deleteMinimum.smt2toList ((local-x Nat) (local-y Heap)) (list Nat) (match local-x (case Z (as nil (list Nat))) (case (prod/prop_14.smt2S local-z) (match local-y (case (tip2015/heap_deleteMinimum.smt2Node local-x2 local-x3 local-x4) (cons local-x3 (tip2015/heap_deleteMinimum.smt2toList local-z (merge local-x2 local-x4)))) (case tip2015/heap_deleteMinimum.smt2Nil (as nil (list Nat)))))))
(define-fun-rec heapSize ((local-x Heap)) Nat (match local-x (case (tip2015/heap_deleteMinimum.smt2Node local-l local-y local-r) (prod/prop_14.smt2S (prod/prop_25.smt2plus (heapSize local-l) (heapSize local-r)))) (case tip2015/heap_deleteMinimum.smt2Nil Z)))
(define-fun toList2 ((local-x Heap)) (list Nat) (tip2015/heap_deleteMinimum.smt2toList (heapSize local-x) local-x))
(define-fun maybeToList ((local-x (Maybe Heap))) (Maybe (list Nat)) (match local-x (case Nothing (as Nothing (Maybe (list Nat)))) (case (Just local-y) (Just (toList2 local-y)))))
(define-fun-rec heap1 ((local-x Nat) (local-y Heap)) Bool (match local-y (case (tip2015/heap_deleteMinimum.smt2Node local-l local-z local-r) (and (le local-x local-z) (and (heap1 local-z local-l) (heap1 local-z local-r)))) (case tip2015/heap_deleteMinimum.smt2Nil true)))
(define-fun heap ((local-x Heap)) Bool (match local-x (case (tip2015/heap_deleteMinimum.smt2Node local-l local-y local-r) (and (heap1 local-y local-l) (heap1 local-y local-r))) (case tip2015/heap_deleteMinimum.smt2Nil true)))
(define-fun deleteMinimum ((local-x Heap)) (Maybe Heap) (match local-x (case (tip2015/heap_deleteMinimum.smt2Node local-l local-y local-r) (Just (merge local-l local-r))) (case tip2015/heap_deleteMinimum.smt2Nil (as Nothing (Maybe Heap)))))
(define-fun zero () Integer (tip2015/int_mul_ident_left.smt2P Z))
(define-fun neg ((local-x Integer)) Integer (match local-x (case (tip2015/int_mul_ident_left.smt2P local-y) (match local-y (case Z (tip2015/int_mul_ident_left.smt2P Z)) (case (prod/prop_14.smt2S local-n) (N local-n)))) (case (N local-m) (tip2015/int_mul_ident_left.smt2P (prod/prop_14.smt2S local-m)))))
(define-fun-rec removeOne2 ((local-x It) (local-y (list (list It)))) (list (list It)) (match local-y (case nil (as nil (list (list It)))) (case (cons local-z local-x2) (cons (cons local-x local-z) (removeOne2 local-x local-x2)))))
(define-fun-rec removeOne ((local-x (list It))) (list (list It)) (match local-x (case nil (as nil (list (list It)))) (case (cons local-y local-xs) (cons local-xs (removeOne2 local-y (removeOne local-xs))))))
(define-fun-rec spec2 ((local-ys (list It)) (local-x (list (list It)))) (list Bool) (match local-x (case nil (as nil (list Bool))) (case (cons local-y local-z) (cons (isPrefix local-y local-ys) (spec2 local-ys local-z)))))
(define-fun spec ((local-x (list It)) (local-y (list It))) Bool (or2 (spec2 local-y (cons local-x (removeOne local-x)))))
(define-funs-rec ((tip2015/propositional_AndIdempotent.smt2models ((local-x Form) (local-y (list (Pair Int Bool)))) (list (list (Pair Int Bool)))) (tip2015/propositional_AndIdempotent.smt2models2 ((local-q Form) (local-x (list (list (Pair Int Bool))))) (list (list (Pair Int Bool)))) (tip2015/propositional_AndIdempotent.smt2models5 ((local-q Form) (local-x (list (list (Pair Int Bool)))) (local-y (list (list (Pair Int Bool))))) (list (list (Pair Int Bool))))) ((match local-x (case (& local-p local-q) (tip2015/propositional_AndIdempotent.smt2models2 local-q (tip2015/propositional_AndIdempotent.smt2models local-p local-y))) (case (Not local-z) (match local-z (case (& local-p2 local-q2) (append (tip2015/propositional_AndIdempotent.smt2models (Not local-p2) local-y) (tip2015/propositional_AndIdempotent.smt2models (& local-p2 (Not local-q2)) local-y))) (case (Not local-p3) (tip2015/propositional_AndIdempotent.smt2models local-p3 local-y)) (case (tip2015/propositional_Okay.smt2Var local-x2) (ite (not (or2 (models3 local-x2 local-y))) (cons (cons (Pair2 local-x2 false) (filter (lambda ((local-x3 (Pair Int Bool))) (distinct local-x2 (fst local-x3))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool)))))))) (case (tip2015/propositional_Okay.smt2Var local-x4) (ite (not (or2 (models4 local-x4 local-y))) (cons (cons (Pair2 local-x4 true) (filter (lambda ((local-x5 (Pair Int Bool))) (distinct local-x4 (fst local-x5))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool))))))) (match local-x (case nil (as nil (list (list (Pair Int Bool))))) (case (cons local-y local-z) (tip2015/propositional_AndIdempotent.smt2models5 local-q local-z (tip2015/propositional_AndIdempotent.smt2models local-q local-y)))) (match local-y (case nil (tip2015/propositional_AndIdempotent.smt2models2 local-q local-x)) (case (cons local-z local-x2) (cons local-z (tip2015/propositional_AndIdempotent.smt2models5 local-q local-x local-x2))))))
(define-fun tip2015/propositional_AndIdempotent.smt2valid ((local-x Form)) Bool (null (tip2015/propositional_AndIdempotent.smt2models (Not local-x) (as nil (list (Pair Int Bool))))))
(define-fun-rec mergeLists ((local-x (list Nat)) (local-y (list Nat))) (list Nat) (match local-x (case nil local-y) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (ite (le local-z local-x3) (cons local-z (mergeLists local-x2 local-y)) (cons local-x3 (mergeLists local-x local-x4))))))))
(define-fun-rec zdeleteAll ((local-x Int) (local-y (list Int))) (list Int) (match local-y (case nil (as nil (list Int))) (case (cons local-z local-xs) (ite (= local-x local-z) (zdeleteAll local-x local-xs) (cons local-z (zdeleteAll local-x local-xs))))))
(define-fun-rec znub ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-xs) (cons local-y (zdeleteAll local-y (znub local-xs))))))
(define-funs-rec ((par (local-a) (tip2015/sort_BSortSorts.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/sort_BSortSorts.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/sort_BSortSorts.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/sort_BSortSorts.smt2evens local-xs)))))
(define-fun-rec tip2015/sort_BSortSorts.smt2bmerge ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (match local-x2 (case nil (match local-x4 (case nil (sort2 local-z local-x3)) (case (cons local-x5 local-x6) (stitch (tip2015/sort_BSortSorts.smt2bmerge (tip2015/sort_BSortSorts.smt2evens (cons local-z (as nil (list Int)))) (tip2015/sort_BSortSorts.smt2evens local-y)) (tip2015/sort_BSortSorts.smt2bmerge (tip2015/sort_BSortSorts.smt2odds (cons local-z (as nil (list Int)))) (tip2015/sort_BSortSorts.smt2odds local-y)))))) (case (cons local-x7 local-x8) (stitch (tip2015/sort_BSortSorts.smt2bmerge (tip2015/sort_BSortSorts.smt2evens local-x) (tip2015/sort_BSortSorts.smt2evens local-y)) (tip2015/sort_BSortSorts.smt2bmerge (tip2015/sort_BSortSorts.smt2odds local-x) (tip2015/sort_BSortSorts.smt2odds local-y))))))))))
(define-fun-rec tip2015/sort_BSortSorts.smt2bsort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-x2 local-x3) (tip2015/sort_BSortSorts.smt2bmerge (tip2015/sort_BSortSorts.smt2bsort (tip2015/sort_BSortSorts.smt2evens local-x)) (tip2015/sort_BSortSorts.smt2bsort (tip2015/sort_BSortSorts.smt2odds local-x))))))))
(define-fun-rec m ((local-x Int)) Int (ite (> local-x 100) (- local-x 10) (m (m (+ local-x 11)))))
(define-fun-rec qsort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-xs) (append (append (qsort (filter (lambda ((local-z Int)) (<= local-z local-y)) local-xs)) (cons local-y (as nil (list Int)))) (qsort (filter (lambda ((local-x2 Int)) (> local-x2 local-y)) local-xs))))))
(define-funs-rec ((tip2015/sort_StoogeSortIsSort.smt2stooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortIsSort.smt2stoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortIsSort.smt2stooge1sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (zlength local-x) 3) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSortIsSort.smt2stoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSortIsSort.smt2stooge1sort2 (tip2015/sort_StoogeSortIsSort.smt2stooge1sort1 (tip2015/sort_StoogeSortIsSort.smt2stooge1sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSortIsSort.smt2stoogesort local-zs))))))
(define-fun-rec risers ((local-x (list Int))) (list (list Int)) (match local-x (case nil (as nil (list (list Int)))) (case (cons local-y local-z) (match local-z (case nil (cons (cons local-y (as nil (list Int))) (as nil (list (list Int))))) (case (cons local-y2 local-xs) (ite (<= local-y local-y2) (match (risers local-z) (case nil (as nil (list (list Int)))) (case (cons local-ys local-yss) (cons (cons local-y local-ys) local-yss))) (cons (cons local-y (as nil (list Int))) (risers local-z))))))))
(define-fun msortbu2 ((local-x (list Int))) (list Int) (mergingbu (risers local-x)))
(define-fun-rec eqList ((local-x (list tip2015/regexp_RecEps.smt2A)) (local-y (list tip2015/regexp_RecEps.smt2A))) Bool (match local-x (case nil (match local-y (case nil true) (case (cons local-z local-x2) false))) (case (cons local-x3 local-xs) (match local-y (case nil false) (case (cons local-y2 local-ys) (and (eqA local-x3 local-y2) (eqList local-xs local-ys)))))))
(define-fun-rec (par (local-a) (select3 ((local-x local-a) (local-y (list (Pair local-a (list local-a))))) (list (Pair local-a (list local-a))) (match local-y (case nil (as nil (list (Pair local-a (list local-a))))) (case (cons local-z local-x2) (match local-z (case (Pair2 local-y2 local-ys) (cons (Pair2 local-y2 (cons local-x local-ys)) (select3 local-x local-x2)))))))))
(define-fun-rec (par (local-a) (select2 ((local-x (list local-a))) (list (Pair local-a (list local-a))) (match local-x (case nil (as nil (list (Pair local-a (list local-a))))) (case (cons local-y local-xs) (cons (Pair2 local-y local-xs) (select3 local-y (select2 local-xs))))))))
(define-fun-rec prop_SelectPermutations ((local-x (list (Pair Int (list Int))))) (list (list Int)) (match local-x (case nil (as nil (list (list Int)))) (case (cons local-y local-z) (match local-y (case (Pair2 local-y2 local-ys) (cons (cons local-y2 local-ys) (prop_SelectPermutations local-z)))))))
(define-fun-rec tip2015/sort_TSortSorts.smt2add ((local-x Int) (local-y (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (tip2015/tree_sort_SortPermutes.smt2Tree Int) (match local-y (case (tip2015/tree_sort_SortPermutes.smt2Node local-p local-z local-q) (ite (<= local-x local-z) (tip2015/tree_sort_SortPermutes.smt2Node (tip2015/sort_TSortSorts.smt2add local-x local-p) local-z local-q) (tip2015/tree_sort_SortPermutes.smt2Node local-p local-z (tip2015/sort_TSortSorts.smt2add local-x local-q)))) (case tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Node (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int)) local-x (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int))))))
(define-fun-rec tip2015/sort_TSortSorts.smt2toTree ((local-x (list Int))) (tip2015/tree_sort_SortPermutes.smt2Tree Int) (match local-x (case nil (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (case (cons local-y local-xs) (tip2015/sort_TSortSorts.smt2add local-y (tip2015/sort_TSortSorts.smt2toTree local-xs)))))
(define-fun tip2015/sort_TSortSorts.smt2tsort ((local-x (list Int))) (list Int) (flatten (tip2015/sort_TSortSorts.smt2toTree local-x) (as nil (list Int))))
(define-fun-rec msorttd ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-x2 local-x3) (let ((local-k (div (zlength local-x) 2))) (lmerge (msorttd (ztake local-k local-x)) (msorttd (zdrop local-k local-x)))))))))
(define-fun-rec pow ((local-x Nat) (local-y Nat)) Nat (match local-y (case Z prod/prop_35.smt2one) (case (prod/prop_14.smt2S local-m) (mult local-x (pow local-x local-m)))))
(define-fun-rec tip2015/rotate_structural_mod.smt2minus ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-n) (match local-y (case Z local-x) (case (prod/prop_14.smt2S local-m) (tip2015/rotate_structural_mod.smt2minus local-n local-m))))))
(define-fun-rec go ((local-x Nat) (local-y Nat) (local-z Nat)) Nat (match local-z (case Z Z) (case (prod/prop_14.smt2S local-x2) (match local-x (case Z (match local-y (case Z Z) (case (prod/prop_14.smt2S local-n) (tip2015/rotate_structural_mod.smt2minus local-z local-y)))) (case (prod/prop_14.smt2S local-m) (match local-y (case Z (go local-m local-x2 local-z)) (case (prod/prop_14.smt2S local-k) (go local-m local-k local-z))))))))
(define-fun mod_structural ((local-x Nat) (local-y Nat)) Nat (go local-x Z local-y))
(define-fun-rec deleteAll ((local-x Nat) (local-y (list Nat))) (list Nat) (match local-y (case nil (as nil (list Nat))) (case (cons local-z local-xs) (ite (equal local-x local-z) (deleteAll local-x local-xs) (cons local-z (deleteAll local-x local-xs))))))
(define-fun-rec nub ((local-x (list Nat))) (list Nat) (match local-x (case nil (as nil (list Nat))) (case (cons local-y local-xs) (cons local-y (deleteAll local-y (nub local-xs))))))
(define-funs-rec ((tip2015/sort_NStoogeSortCount.smt2nstooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortCount.smt2nstoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortCount.smt2nstooge1sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (third (length local-x)) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSortCount.smt2nstoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSortCount.smt2nstooge1sort2 (tip2015/sort_NStoogeSortCount.smt2nstooge1sort1 (tip2015/sort_NStoogeSortCount.smt2nstooge1sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSortCount.smt2nstoogesort local-zs))))))
(define-fun-rec deeps ((local-x tip2015/regexp_RecEps.smt2R)) tip2015/regexp_RecEps.smt2R (match local-x (case tip2015/regexp_RecEps.smt2Nil tip2015/regexp_RecEps.smt2Nil) (case Eps tip2015/regexp_RecEps.smt2Nil) (case (Atom local-a) local-x) (case (tip2015/regexp_RecEps.smt2Plus local-p local-q) (tip2015/regexp_RecEps.smt2Plus (deeps local-p) (deeps local-q))) (case (tip2015/regexp_RecEps.smt2Seq local-p2 local-q2) (ite (and (eps local-p2) (eps local-q2)) (tip2015/regexp_RecEps.smt2Plus (deeps local-p2) (deeps local-q2)) local-x)) (case (Star local-p3) (deeps local-p3))))
(define-fun tip2015/heap_insert.smt2insert2 ((local-x Nat) (local-y Heap)) Heap (merge (tip2015/heap_deleteMinimum.smt2Node tip2015/heap_deleteMinimum.smt2Nil local-x tip2015/heap_deleteMinimum.smt2Nil) local-y))
(define-fun-rec alt_mul ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-z) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-x2) (prod/prop_14.smt2S (prod/prop_25.smt2plus (prod/prop_25.smt2plus (alt_mul local-z local-x2) local-z) local-x2)))))))
(define-funs-rec ((tip2015/sort_StoogeSortPermutes.smt2stooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortPermutes.smt2stoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortPermutes.smt2stooge1sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (zlength local-x) 3) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSortPermutes.smt2stoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSortPermutes.smt2stooge1sort2 (tip2015/sort_StoogeSortPermutes.smt2stooge1sort1 (tip2015/sort_StoogeSortPermutes.smt2stooge1sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSortPermutes.smt2stoogesort local-zs))))))
(define-fun-rec mod2 ((local-x Nat) (local-y Nat)) Nat (match local-y (case Z Z) (case (prod/prop_14.smt2S local-z) (ite (lt local-x local-y) local-x (mod2 (tip2015/rotate_structural_mod.smt2minus local-x local-y) local-y)))))
(define-fun-rec gt ((local-x Nat) (local-y Nat)) Bool (match local-x (case Z false) (case (prod/prop_14.smt2S local-z) (match local-y (case Z true) (case (prod/prop_14.smt2S local-x2) (gt local-z local-x2))))))
(define-fun-rec tip2015/heap_SortPermutes.smt2toHeap ((local-x (list Nat))) Heap (match local-x (case nil tip2015/heap_deleteMinimum.smt2Nil) (case (cons local-y local-xs) (tip2015/heap_insert.smt2insert2 local-y (tip2015/heap_SortPermutes.smt2toHeap local-xs)))))
(define-fun tip2015/heap_SortPermutes.smt2hsort ((local-x (list Nat))) (list Nat) (toList2 (tip2015/heap_SortPermutes.smt2toHeap local-x)))
(define-funs-rec ((tip2015/propositional_AndCommutative.smt2models ((local-x Form) (local-y (list (Pair Int Bool)))) (list (list (Pair Int Bool)))) (tip2015/propositional_AndCommutative.smt2models2 ((local-q Form) (local-x (list (list (Pair Int Bool))))) (list (list (Pair Int Bool)))) (tip2015/propositional_AndCommutative.smt2models5 ((local-q Form) (local-x (list (list (Pair Int Bool)))) (local-y (list (list (Pair Int Bool))))) (list (list (Pair Int Bool))))) ((match local-x (case (& local-p local-q) (tip2015/propositional_AndCommutative.smt2models2 local-q (tip2015/propositional_AndCommutative.smt2models local-p local-y))) (case (Not local-z) (match local-z (case (& local-p2 local-q2) (append (tip2015/propositional_AndCommutative.smt2models (Not local-p2) local-y) (tip2015/propositional_AndCommutative.smt2models (& local-p2 (Not local-q2)) local-y))) (case (Not local-p3) (tip2015/propositional_AndCommutative.smt2models local-p3 local-y)) (case (tip2015/propositional_Okay.smt2Var local-x2) (ite (not (or2 (models3 local-x2 local-y))) (cons (cons (Pair2 local-x2 false) (filter (lambda ((local-x3 (Pair Int Bool))) (distinct local-x2 (fst local-x3))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool)))))))) (case (tip2015/propositional_Okay.smt2Var local-x4) (ite (not (or2 (models4 local-x4 local-y))) (cons (cons (Pair2 local-x4 true) (filter (lambda ((local-x5 (Pair Int Bool))) (distinct local-x4 (fst local-x5))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool))))))) (match local-x (case nil (as nil (list (list (Pair Int Bool))))) (case (cons local-y local-z) (tip2015/propositional_AndCommutative.smt2models5 local-q local-z (tip2015/propositional_AndCommutative.smt2models local-q local-y)))) (match local-y (case nil (tip2015/propositional_AndCommutative.smt2models2 local-q local-x)) (case (cons local-z local-x2) (cons local-z (tip2015/propositional_AndCommutative.smt2models5 local-q local-x local-x2))))))
(define-fun tip2015/propositional_AndCommutative.smt2valid ((local-x Form)) Bool (null (tip2015/propositional_AndCommutative.smt2models (Not local-x) (as nil (list (Pair Int Bool))))))
(define-fun-rec tip2015/bin_times_assoc.smt2times ((local-x Bin) (local-y Bin)) Bin (match local-x (case One local-y) (case (ZeroAnd local-xs) (ZeroAnd (tip2015/bin_times_assoc.smt2times local-xs local-y))) (case (OneAnd local-ys) (tip2015/bin_plus_comm.smt2plus (ZeroAnd (tip2015/bin_times_assoc.smt2times local-ys local-y)) local-y))))
(define-fun-rec min2 ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-z) (match local-y (case Z Z) (case (prod/prop_14.smt2S local-x2) (prod/prop_14.smt2S (min2 local-z local-x2)))))))
(define-fun-rec ge ((local-x Nat) (local-y Nat)) Bool (match local-y (case Z true) (case (prod/prop_14.smt2S local-z) (match local-x (case Z false) (case (prod/prop_14.smt2S local-x2) (ge local-x2 local-z))))))
(define-fun-rec (par (local-a) (interleave ((local-x (list local-a)) (local-y (list local-a))) (list local-a) (match local-x (case nil local-y) (case (cons local-z local-xs) (cons local-z (interleave local-y local-xs)))))))
(define-funs-rec ((par (local-a) (tip2015/list_Interleave.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/list_Interleave.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/list_Interleave.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/list_Interleave.smt2evens local-xs)))))
(define-fun-rec max2 ((local-x Nat) (local-y Nat)) Nat (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (match local-y (case Z local-x) (case (prod/prop_14.smt2S local-x2) (prod/prop_14.smt2S (max2 local-z local-x2)))))))
(define-funs-rec ((tip2015/sort_StoogeSortSorts.smt2stooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortSorts.smt2stoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortSorts.smt2stooge1sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (zlength local-x) 3) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSortSorts.smt2stoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSortSorts.smt2stooge1sort2 (tip2015/sort_StoogeSortSorts.smt2stooge1sort1 (tip2015/sort_StoogeSortSorts.smt2stooge1sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSortSorts.smt2stoogesort local-zs))))))
(define-fun-rec (par (local-a) (split2 ((local-x local-a) (local-y (list (Pair (list local-a) (list local-a))))) (list (Pair (list local-a) (list local-a))) (match local-y (case nil (as nil (list (Pair (list local-a) (list local-a))))) (case (cons local-z local-x2) (match local-z (case (Pair2 local-xs local-ys) (cons (Pair2 (cons local-x local-xs) local-ys) (split2 local-x local-x2)))))))))
(define-fun-rec (par (local-a) (split ((local-x (list local-a))) (list (Pair (list local-a) (list local-a))) (match local-x (case nil (cons (Pair2 (as nil (list local-a)) (as nil (list local-a))) (as nil (list (Pair (list local-a) (list local-a)))))) (case (cons local-y local-s) (cons (Pair2 (as nil (list local-a)) local-x) (split2 local-y (split local-s))))))))
(define-fun-rec prop_RecSeq ((local-p tip2015/regexp_RecEps.smt2R) (local-q tip2015/regexp_RecEps.smt2R) (local-x (list (Pair (list tip2015/regexp_RecEps.smt2A) (list tip2015/regexp_RecEps.smt2A))))) (list Bool) (match local-x (case nil (as nil (list Bool))) (case (cons local-y local-z) (match local-y (case (Pair2 local-s1 local-s2) (cons (and (recognise local-p local-s1) (recognise local-q local-s2)) (prop_RecSeq local-p local-q local-z)))))))
(define-funs-rec ((tip2015/sort_StoogeSort2Permutes.smt2stooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2Permutes.smt2stoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2Permutes.smt2stooge2sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (+ (* 2 (zlength local-x)) 1) 3) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSort2Permutes.smt2stoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSort2Permutes.smt2stooge2sort2 (tip2015/sort_StoogeSort2Permutes.smt2stooge2sort1 (tip2015/sort_StoogeSort2Permutes.smt2stooge2sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSort2Permutes.smt2stoogesort2 local-zs))))))
(define-fun-rec (par (local-t) (tip2015/list_PairEvens.smt2pairs ((local-x (list local-t))) (list (Pair local-t local-t)) (match local-x (case nil (as nil (list (Pair local-t local-t)))) (case (cons local-y local-z) (match local-z (case nil (as nil (list (Pair local-t local-t)))) (case (cons local-y2 local-xs) (cons (Pair2 local-y local-y2) (tip2015/list_PairEvens.smt2pairs local-xs)))))))))
(define-funs-rec ((par (local-a) (tip2015/list_PairEvens.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/list_PairEvens.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/list_PairEvens.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/list_PairEvens.smt2evens local-xs)))))
(define-fun-rec (par (local-a) (flatten1 ((local-x (list (tip2015/tree_sort_SortPermutes.smt2Tree local-a)))) (list local-a) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-ps) (match local-y (case (tip2015/tree_sort_SortPermutes.smt2Node local-z local-x2 local-q) (match local-z (case (tip2015/tree_sort_SortPermutes.smt2Node local-x3 local-x4 local-x5) (flatten1 (cons local-z (cons (tip2015/tree_sort_SortPermutes.smt2Node (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree local-a)) local-x2 local-q) local-ps)))) (case tip2015/tree_sort_SortPermutes.smt2Nil (cons local-x2 (flatten1 (cons local-q local-ps)))))) (case tip2015/tree_sort_SortPermutes.smt2Nil (flatten1 local-ps))))))))
(define-fun-rec (par (local-a local-b) (concatMap ((local-x (=> local-a (list local-b))) (local-y (list local-a))) (list local-b) (match local-y (case nil (as nil (list local-b))) (case (cons local-z local-xs) (append (@ local-x local-z) (concatMap local-x local-xs)))))))
(define-fun-rec tip2015/regexp_Reverse.smt2rev ((local-x tip2015/regexp_RecEps.smt2R)) tip2015/regexp_RecEps.smt2R (match local-x (case default local-x) (case (tip2015/regexp_RecEps.smt2Plus local-a local-b) (tip2015/regexp_RecEps.smt2Plus (tip2015/regexp_Reverse.smt2rev local-a) (tip2015/regexp_Reverse.smt2rev local-b))) (case (tip2015/regexp_RecEps.smt2Seq local-c local-b2) (tip2015/regexp_RecEps.smt2Seq (tip2015/regexp_Reverse.smt2rev local-b2) (tip2015/regexp_Reverse.smt2rev local-c))) (case (Star local-a2) (Star (tip2015/regexp_Reverse.smt2rev local-a2)))))
(define-funs-rec ((tip2015/sort_NStoogeSort2Permutes.smt2nstooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2Permutes.smt2nstoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2Permutes.smt2nstooge2sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (twoThirds (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSort2Permutes.smt2nstoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSort2Permutes.smt2nstooge2sort2 (tip2015/sort_NStoogeSort2Permutes.smt2nstooge2sort1 (tip2015/sort_NStoogeSort2Permutes.smt2nstooge2sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSort2Permutes.smt2nstoogesort2 local-zs))))))
(define-fun-rec toNat ((local-x Bin)) Nat (match local-x (case One (prod/prop_14.smt2S Z)) (case (ZeroAnd local-xs) (prod/prop_25.smt2plus (toNat local-xs) (toNat local-xs))) (case (OneAnd local-ys) (prod/prop_14.smt2S (prod/prop_25.smt2plus (toNat local-ys) (toNat local-ys))))))
(declare-datatypes () ((Expr (tip2015/subst_SubstFreeNo.smt2Var (tip2015/subst_SubstFreeNo.smt2Var_0 Int)) (Lam (Lam_0 Int) (Lam_1 Expr)) (App (App_0 Expr) (App_1 Expr)))))
(define-fun-rec new_maximum ((local-x Int) (local-y (list Int))) Int (match local-y (case nil local-x) (case (cons local-z local-ys) (ite (<= local-x local-z) (new_maximum local-z local-ys) (new_maximum local-x local-ys)))))
(define-fun new ((local-x (list Int))) Int (+ (new_maximum 0 local-x) 1))
(define-fun-rec free ((local-x Expr)) (list Int) (match local-x (case (tip2015/subst_SubstFreeNo.smt2Var local-y) (cons local-y (as nil (list Int)))) (case (Lam local-z local-b) (filter (lambda ((local-x2 Int)) (distinct local-z local-x2)) (free local-b))) (case (App local-a2 local-b2) (append (free local-a2) (free local-b2)))))
(define-fun-rec subst ((local-x Int) (local-y Expr) (local-z Expr)) Expr (match local-z (case (tip2015/subst_SubstFreeNo.smt2Var local-y2) (ite (= local-x local-y2) local-y local-z)) (case (Lam local-y3 local-a) (let ((local-z2 (new (append (free local-y) (free local-a))))) (ite (= local-x local-y3) local-z (ite (zelem local-y3 (free local-y)) (subst local-x local-y (Lam local-z2 (subst local-y3 (tip2015/subst_SubstFreeNo.smt2Var local-z2) local-a))) (Lam local-y3 (subst local-x local-y local-a)))))) (case (App local-c local-b2) (App (subst local-x local-y local-c) (subst local-x local-y local-b2)))))
(define-fun (par (local-a) (return ((local-x local-a)) (list local-a) (cons local-x (as nil (list local-a))))))
(define-funs-rec ((par (local-a) (tip2015/sort_BSortIsSort.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/sort_BSortIsSort.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/sort_BSortIsSort.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/sort_BSortIsSort.smt2evens local-xs)))))
(define-fun-rec tip2015/sort_BSortIsSort.smt2bmerge ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (match local-x2 (case nil (match local-x4 (case nil (sort2 local-z local-x3)) (case (cons local-x5 local-x6) (stitch (tip2015/sort_BSortIsSort.smt2bmerge (tip2015/sort_BSortIsSort.smt2evens (cons local-z (as nil (list Int)))) (tip2015/sort_BSortIsSort.smt2evens local-y)) (tip2015/sort_BSortIsSort.smt2bmerge (tip2015/sort_BSortIsSort.smt2odds (cons local-z (as nil (list Int)))) (tip2015/sort_BSortIsSort.smt2odds local-y)))))) (case (cons local-x7 local-x8) (stitch (tip2015/sort_BSortIsSort.smt2bmerge (tip2015/sort_BSortIsSort.smt2evens local-x) (tip2015/sort_BSortIsSort.smt2evens local-y)) (tip2015/sort_BSortIsSort.smt2bmerge (tip2015/sort_BSortIsSort.smt2odds local-x) (tip2015/sort_BSortIsSort.smt2odds local-y))))))))))
(define-fun-rec tip2015/sort_BSortIsSort.smt2bsort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-x2 local-x3) (tip2015/sort_BSortIsSort.smt2bmerge (tip2015/sort_BSortIsSort.smt2bsort (tip2015/sort_BSortIsSort.smt2evens local-x)) (tip2015/sort_BSortIsSort.smt2bsort (tip2015/sort_BSortIsSort.smt2odds local-x))))))))
(define-funs-rec ((tip2015/propositional_Sound.smt2models ((local-x Form) (local-y (list (Pair Int Bool)))) (list (list (Pair Int Bool)))) (tip2015/propositional_Sound.smt2models2 ((local-q Form) (local-x (list (list (Pair Int Bool))))) (list (list (Pair Int Bool)))) (tip2015/propositional_Sound.smt2models5 ((local-q Form) (local-x (list (list (Pair Int Bool)))) (local-y (list (list (Pair Int Bool))))) (list (list (Pair Int Bool))))) ((match local-x (case (& local-p local-q) (tip2015/propositional_Sound.smt2models2 local-q (tip2015/propositional_Sound.smt2models local-p local-y))) (case (Not local-z) (match local-z (case (& local-p2 local-q2) (append (tip2015/propositional_Sound.smt2models (Not local-p2) local-y) (tip2015/propositional_Sound.smt2models (& local-p2 (Not local-q2)) local-y))) (case (Not local-p3) (tip2015/propositional_Sound.smt2models local-p3 local-y)) (case (tip2015/propositional_Okay.smt2Var local-x2) (ite (not (or2 (models3 local-x2 local-y))) (cons (cons (Pair2 local-x2 false) (filter (lambda ((local-x3 (Pair Int Bool))) (distinct local-x2 (fst local-x3))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool)))))))) (case (tip2015/propositional_Okay.smt2Var local-x4) (ite (not (or2 (models4 local-x4 local-y))) (cons (cons (Pair2 local-x4 true) (filter (lambda ((local-x5 (Pair Int Bool))) (distinct local-x4 (fst local-x5))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool))))))) (match local-x (case nil (as nil (list (list (Pair Int Bool))))) (case (cons local-y local-z) (tip2015/propositional_Sound.smt2models5 local-q local-z (tip2015/propositional_Sound.smt2models local-q local-y)))) (match local-y (case nil (tip2015/propositional_Sound.smt2models2 local-q local-x)) (case (cons local-z local-x2) (cons local-z (tip2015/propositional_Sound.smt2models5 local-q local-x local-x2))))))
(define-fun-rec =2 ((local-x (list (Pair Int Bool))) (local-y Form)) Bool (match local-y (case (& local-p local-q) (and (=2 local-x local-p) (=2 local-x local-q))) (case (Not local-p2) (not (=2 local-x local-p2))) (case (tip2015/propositional_Okay.smt2Var local-z) (or2 (models3 local-z local-x)))))
(define-funs-rec ((tip2015/sort_StoogeSort2IsSort.smt2stooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2IsSort.smt2stoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2IsSort.smt2stooge2sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (+ (* 2 (zlength local-x)) 1) 3) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSort2IsSort.smt2stoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSort2IsSort.smt2stooge2sort2 (tip2015/sort_StoogeSort2IsSort.smt2stooge2sort1 (tip2015/sort_StoogeSort2IsSort.smt2stooge2sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSort2IsSort.smt2stoogesort2 local-zs))))))
(define-funs-rec ((par (local-a) (tip2015/sort_BSortCount.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/sort_BSortCount.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/sort_BSortCount.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/sort_BSortCount.smt2evens local-xs)))))
(define-fun-rec tip2015/sort_BSortCount.smt2bmerge ((local-x (list Int)) (local-y (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-z local-x2) (match local-y (case nil local-x) (case (cons local-x3 local-x4) (match local-x2 (case nil (match local-x4 (case nil (sort2 local-z local-x3)) (case (cons local-x5 local-x6) (stitch (tip2015/sort_BSortCount.smt2bmerge (tip2015/sort_BSortCount.smt2evens (cons local-z (as nil (list Int)))) (tip2015/sort_BSortCount.smt2evens local-y)) (tip2015/sort_BSortCount.smt2bmerge (tip2015/sort_BSortCount.smt2odds (cons local-z (as nil (list Int)))) (tip2015/sort_BSortCount.smt2odds local-y)))))) (case (cons local-x7 local-x8) (stitch (tip2015/sort_BSortCount.smt2bmerge (tip2015/sort_BSortCount.smt2evens local-x) (tip2015/sort_BSortCount.smt2evens local-y)) (tip2015/sort_BSortCount.smt2bmerge (tip2015/sort_BSortCount.smt2odds local-x) (tip2015/sort_BSortCount.smt2odds local-y))))))))))
(define-fun-rec tip2015/sort_BSortCount.smt2bsort ((local-x (list Int))) (list Int) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-x2 local-x3) (tip2015/sort_BSortCount.smt2bmerge (tip2015/sort_BSortCount.smt2bsort (tip2015/sort_BSortCount.smt2evens local-x)) (tip2015/sort_BSortCount.smt2bsort (tip2015/sort_BSortCount.smt2odds local-x))))))))
(define-funs-rec ((tip2015/sort_StoogeSortCount.smt2stooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortCount.smt2stoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSortCount.smt2stooge1sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (zlength local-x) 3) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSortCount.smt2stoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSortCount.smt2stooge1sort2 (tip2015/sort_StoogeSortCount.smt2stooge1sort1 (tip2015/sort_StoogeSortCount.smt2stooge1sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSortCount.smt2stoogesort local-zs))))))
(define-fun-rec (par (local-a) (snoc ((local-x local-a) (local-y (list local-a))) (list local-a) (match local-y (case nil (cons local-x (as nil (list local-a)))) (case (cons local-z local-ys) (cons local-z (snoc local-x local-ys)))))))
(define-fun-rec (par (local-a) (tip2015/rotate_snoc.smt2rotate ((local-x Nat) (local-y (list local-a))) (list local-a) (match local-x (case Z local-y) (case (prod/prop_14.smt2S local-z) (match local-y (case nil (as nil (list local-a))) (case (cons local-x2 local-x3) (tip2015/rotate_snoc.smt2rotate local-z (snoc local-x2 local-x3)))))))))
(define-fun-rec swap ((local-x Int) (local-y Int) (local-z (tip2015/tree_sort_SortPermutes.smt2Tree Int))) (tip2015/tree_sort_SortPermutes.smt2Tree Int) (match local-z (case (tip2015/tree_sort_SortPermutes.smt2Node local-p local-x2 local-q) (ite (= local-x2 local-x) (tip2015/tree_sort_SortPermutes.smt2Node (swap local-x local-y local-p) local-y (swap local-x local-y local-q)) (ite (= local-x2 local-y) (tip2015/tree_sort_SortPermutes.smt2Node (swap local-x local-y local-p) local-x (swap local-x local-y local-q)) (tip2015/tree_sort_SortPermutes.smt2Node (swap local-x local-y local-p) local-x2 (swap local-x local-y local-q))))) (case tip2015/tree_sort_SortPermutes.smt2Nil (as tip2015/tree_sort_SortPermutes.smt2Nil (tip2015/tree_sort_SortPermutes.smt2Tree Int)))))
(define-fun-rec (par (local-t) (unpair ((local-x (list (Pair local-t local-t)))) (list local-t) (match local-x (case nil (as nil (list local-t))) (case (cons local-y local-xys) (match local-y (case (Pair2 local-z local-y2) (cons local-z (cons local-y2 (unpair local-xys))))))))))
(define-funs-rec ((tip2015/sort_NStoogeSort2Count.smt2nstooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2Count.smt2nstoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2Count.smt2nstooge2sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (twoThirds (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSort2Count.smt2nstoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSort2Count.smt2nstooge2sort2 (tip2015/sort_NStoogeSort2Count.smt2nstooge2sort1 (tip2015/sort_NStoogeSort2Count.smt2nstooge2sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSort2Count.smt2nstoogesort2 local-zs))))))
(define-fun-rec sum ((local-x Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-n) (prod/prop_25.smt2plus (sum local-n) local-x))))
(define-fun-rec cubes ((local-x Nat)) Nat (match local-x (case Z Z) (case (prod/prop_14.smt2S local-n) (prod/prop_25.smt2plus (cubes local-n) (mult (mult local-x local-x) local-x)))))
(define-funs-rec ((tip2015/sort_NStoogeSortPermutes.smt2nstooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortPermutes.smt2nstoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortPermutes.smt2nstooge1sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (third (length local-x)) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSortPermutes.smt2nstoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSortPermutes.smt2nstooge1sort2 (tip2015/sort_NStoogeSortPermutes.smt2nstooge1sort1 (tip2015/sort_NStoogeSortPermutes.smt2nstooge1sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSortPermutes.smt2nstoogesort local-zs))))))
(declare-datatypes (local-a) ((tip2015/polyrec_seq_index.smt2Seq (tip2015/polyrec_seq_index.smt2Nil) (Cons (Cons_0 local-a) (Cons_1 (tip2015/polyrec_seq_index.smt2Seq (Pair local-a (Maybe local-a))))))))
(define-fun (par (local-a local-b) (snd ((local-x (Pair local-a local-b))) local-b (match local-x (case (Pair2 local-y local-z) local-z)))))
(define-fun-rec (par (local-a) (pair ((local-x (list local-a))) (list (Pair local-a (Maybe local-a))) (match local-x (case nil (as nil (list (Pair local-a (Maybe local-a))))) (case (cons local-y local-z) (match local-z (case nil (cons (Pair2 local-y (as Nothing (Maybe local-a))) (as nil (list (Pair local-a (Maybe local-a)))))) (case (cons local-y2 local-xs) (cons (Pair2 local-y (Just local-y2)) (pair local-xs)))))))))
(define-fun-rec (par (local-a) (lookup ((local-x Int) (local-y (list local-a))) (Maybe local-a) (match local-y (case nil (as Nothing (Maybe local-a))) (case (cons local-z local-x2) (ite (= local-x 0) (Just local-z) (lookup (- local-x 1) local-x2)))))))
(define-fun-rec (par (local-a) (index ((local-x Int) (local-y (tip2015/polyrec_seq_index.smt2Seq local-a))) (Maybe local-a) (match local-y (case tip2015/polyrec_seq_index.smt2Nil (as Nothing (Maybe local-a))) (case (Cons local-z local-x2) (ite (= local-x 0) (Just local-z) (ite (= (mod local-x 2) 0) (match (index (div (- local-x 1) 2) local-x2) (case Nothing (as Nothing (Maybe local-a))) (case (Just local-x4) (snd local-x4))) (match (index (div (- local-x 1) 2) local-x2) (case Nothing (as Nothing (Maybe local-a))) (case (Just local-x3) (Just (fst local-x3)))))))))))
(define-fun-rec (par (local-a) (fromList ((local-x (list local-a))) (tip2015/polyrec_seq_index.smt2Seq local-a) (match local-x (case nil (as tip2015/polyrec_seq_index.smt2Nil (tip2015/polyrec_seq_index.smt2Seq local-a))) (case (cons local-y local-xs) (Cons local-y (fromList (pair local-xs))))))))
(define-funs-rec ((tip2015/sort_NStoogeSort2Sorts.smt2nstooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2Sorts.smt2nstoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSort2Sorts.smt2nstooge2sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (twoThirds (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSort2Sorts.smt2nstoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSort2Sorts.smt2nstooge2sort2 (tip2015/sort_NStoogeSort2Sorts.smt2nstooge2sort1 (tip2015/sort_NStoogeSort2Sorts.smt2nstooge2sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSort2Sorts.smt2nstoogesort2 local-zs))))))
(declare-datatypes () ((Token (tip2015/escape_Injective.smt2A) (tip2015/escape_Injective.smt2B) (tip2015/escape_Injective.smt2C) (tip2015/escape_Injective.smt2D) (ESC) (tip2015/escape_Injective.smt2P) (Q) (tip2015/escape_Injective.smt2R))))
(define-fun isSpecial ((local-x Token)) Bool (match local-x (case default false) (case ESC true) (case tip2015/escape_Injective.smt2P true) (case Q true) (case tip2015/escape_Injective.smt2R true)))
(define-fun code ((local-x Token)) Token (match local-x (case default local-x) (case ESC ESC) (case tip2015/escape_Injective.smt2P tip2015/escape_Injective.smt2A) (case Q tip2015/escape_Injective.smt2B) (case tip2015/escape_Injective.smt2R tip2015/escape_Injective.smt2C)))
(define-fun-rec escape ((local-x (list Token))) (list Token) (match local-x (case nil (as nil (list Token))) (case (cons local-y local-xs) (ite (isSpecial local-y) (cons ESC (cons (code local-y) (escape local-xs))) (cons local-y (escape local-xs))))))
(define-fun minimum ((local-x Heap)) (Maybe Nat) (match local-x (case (tip2015/heap_deleteMinimum.smt2Node local-y local-z local-x2) (Just local-z)) (case tip2015/heap_deleteMinimum.smt2Nil (as Nothing (Maybe Nat)))))
(define-fun listMinimum ((local-x (list Nat))) (Maybe Nat) (match local-x (case nil (as Nothing (Maybe Nat))) (case (cons local-y local-z) (Just local-y))))
(define-funs-rec ((par (local-a) (tip2015/list_PairOdds.smt2evens ((local-x (list local-a))) (list local-a))) (par (local-a) (tip2015/list_PairOdds.smt2odds ((local-x (list local-a))) (list local-a)))) ((match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (cons local-y (tip2015/list_PairOdds.smt2odds local-xs)))) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-xs) (tip2015/list_PairOdds.smt2evens local-xs)))))
(define-fun isEsc ((local-x Token)) Bool (match local-x (case default false) (case ESC true)))
(define-fun ok ((local-x Token)) Bool (or (not (isSpecial local-x)) (isEsc local-x)))
(define-funs-rec ((tip2015/sort_NStoogeSortSorts.smt2nstooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortSorts.smt2nstoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortSorts.smt2nstooge1sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (third (length local-x)) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSortSorts.smt2nstoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSortSorts.smt2nstooge1sort2 (tip2015/sort_NStoogeSortSorts.smt2nstooge1sort1 (tip2015/sort_NStoogeSortSorts.smt2nstooge1sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSortSorts.smt2nstoogesort local-zs))))))
(define-funs-rec ((tip2015/propositional_AndImplication.smt2models ((local-x Form) (local-y (list (Pair Int Bool)))) (list (list (Pair Int Bool)))) (tip2015/propositional_AndImplication.smt2models2 ((local-q Form) (local-x (list (list (Pair Int Bool))))) (list (list (Pair Int Bool)))) (tip2015/propositional_AndImplication.smt2models5 ((local-q Form) (local-x (list (list (Pair Int Bool)))) (local-y (list (list (Pair Int Bool))))) (list (list (Pair Int Bool))))) ((match local-x (case (& local-p local-q) (tip2015/propositional_AndImplication.smt2models2 local-q (tip2015/propositional_AndImplication.smt2models local-p local-y))) (case (Not local-z) (match local-z (case (& local-p2 local-q2) (append (tip2015/propositional_AndImplication.smt2models (Not local-p2) local-y) (tip2015/propositional_AndImplication.smt2models (& local-p2 (Not local-q2)) local-y))) (case (Not local-p3) (tip2015/propositional_AndImplication.smt2models local-p3 local-y)) (case (tip2015/propositional_Okay.smt2Var local-x2) (ite (not (or2 (models3 local-x2 local-y))) (cons (cons (Pair2 local-x2 false) (filter (lambda ((local-x3 (Pair Int Bool))) (distinct local-x2 (fst local-x3))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool)))))))) (case (tip2015/propositional_Okay.smt2Var local-x4) (ite (not (or2 (models4 local-x4 local-y))) (cons (cons (Pair2 local-x4 true) (filter (lambda ((local-x5 (Pair Int Bool))) (distinct local-x4 (fst local-x5))) local-y)) (as nil (list (list (Pair Int Bool))))) (as nil (list (list (Pair Int Bool))))))) (match local-x (case nil (as nil (list (list (Pair Int Bool))))) (case (cons local-y local-z) (tip2015/propositional_AndImplication.smt2models5 local-q local-z (tip2015/propositional_AndImplication.smt2models local-q local-y)))) (match local-y (case nil (tip2015/propositional_AndImplication.smt2models2 local-q local-x)) (case (cons local-z local-x2) (cons local-z (tip2015/propositional_AndImplication.smt2models5 local-q local-x local-x2))))))
(define-fun tip2015/propositional_AndImplication.smt2valid ((local-x Form)) Bool (null (tip2015/propositional_AndImplication.smt2models (Not local-x) (as nil (list (Pair Int Bool))))))
(define-funs-rec ((tip2015/sort_StoogeSort2Count.smt2stooge2sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2Count.smt2stoogesort2 ((local-x (list Int))) (list Int)) (tip2015/sort_StoogeSort2Count.smt2stooge2sort1 ((local-x (list Int))) (list Int))) ((match (zsplitAt (div (+ (* 2 (zlength local-x)) 1) 3) local-x) (case (Pair2 local-ys local-zs) (append (tip2015/sort_StoogeSort2Count.smt2stoogesort2 local-ys) local-zs))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_StoogeSort2Count.smt2stooge2sort2 (tip2015/sort_StoogeSort2Count.smt2stooge2sort1 (tip2015/sort_StoogeSort2Count.smt2stooge2sort2 local-x))))))))) (match (zsplitAt (div (zlength local-x) 3) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_StoogeSort2Count.smt2stoogesort2 local-zs))))))
(define-funs-rec ((tip2015/sort_NStoogeSortIsSort.smt2nstooge1sort2 ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortIsSort.smt2nstoogesort ((local-x (list Int))) (list Int)) (tip2015/sort_NStoogeSortIsSort.smt2nstooge1sort1 ((local-x (list Int))) (list Int))) ((match (splitAt (third (length local-x)) (prod/prop_18.smt2rev local-x)) (case (Pair2 local-ys local-zs) (append (tip2015/sort_NStoogeSortIsSort.smt2nstoogesort local-zs) (prod/prop_18.smt2rev local-ys)))) (match local-x (case nil (as nil (list Int))) (case (cons local-y local-z) (match local-z (case nil (cons local-y (as nil (list Int)))) (case (cons local-y2 local-x2) (match local-x2 (case nil (sort2 local-y local-y2)) (case (cons local-x3 local-x4) (tip2015/sort_NStoogeSortIsSort.smt2nstooge1sort2 (tip2015/sort_NStoogeSortIsSort.smt2nstooge1sort1 (tip2015/sort_NStoogeSortIsSort.smt2nstooge1sort2 local-x))))))))) (match (splitAt (third (length local-x)) local-x) (case (Pair2 local-ys local-zs) (append local-ys (tip2015/sort_NStoogeSortIsSort.smt2nstoogesort local-zs))))))
(declare-datatypes () ((Tok (grammars/simp_expr_unambig4.smt2C) (grammars/simp_expr_unambig4.smt2D) (grammars/simp_expr_unambig4.smt2X) (grammars/simp_expr_unambig4.smt2Y) (Pl))))
(declare-datatypes () ((grammars/simp_expr_unambig4.smt2E (grammars/simp_expr_unambig4.smt2Plus (grammars/simp_expr_unambig4.smt2Plus_0 grammars/simp_expr_unambig4.smt2E) (grammars/simp_expr_unambig4.smt2Plus_1 grammars/simp_expr_unambig4.smt2E)) (EX) (EY))))
(define-funs-rec ((grammars/simp_expr_unambig4.smt2linTerm ((local-x grammars/simp_expr_unambig4.smt2E)) (list Tok)) (grammars/simp_expr_unambig4.smt2lin ((local-x grammars/simp_expr_unambig4.smt2E)) (list Tok))) ((match local-x (case (grammars/simp_expr_unambig4.smt2Plus local-y local-z) (append (append (cons grammars/simp_expr_unambig4.smt2C (as nil (list Tok))) (grammars/simp_expr_unambig4.smt2lin local-x)) (cons grammars/simp_expr_unambig4.smt2D (as nil (list Tok))))) (case EX (cons grammars/simp_expr_unambig4.smt2X (as nil (list Tok)))) (case EY (cons grammars/simp_expr_unambig4.smt2Y (as nil (list Tok))))) (match local-x (case (grammars/simp_expr_unambig4.smt2Plus local-a local-b) (append (append (grammars/simp_expr_unambig4.smt2linTerm local-a) (cons Pl (as nil (list Tok)))) (grammars/simp_expr_unambig4.smt2linTerm local-b))) (case EX (cons grammars/simp_expr_unambig4.smt2X (as nil (list Tok)))) (case EY (cons grammars/simp_expr_unambig4.smt2Y (as nil (list Tok)))))))
(declare-datatypes () ((grammars/simp_expr_unambig5.smt2E (grammars/simp_expr_unambig5.smt2Plus (grammars/simp_expr_unambig5.smt2Plus_0 tip2015/regexp_RecEps.smt2A) (grammars/simp_expr_unambig5.smt2Plus_1 grammars/simp_expr_unambig5.smt2E)) (Term (Term_0 tip2015/regexp_RecEps.smt2A)))))
(define-fun grammars/simp_expr_unambig5.smt2linTerm ((local-x tip2015/regexp_RecEps.smt2A)) (list Tok) (match local-x (case tip2015/regexp_RecEps.smt2X (cons grammars/simp_expr_unambig4.smt2X (as nil (list Tok)))) (case tip2015/regexp_RecEps.smt2Y (cons grammars/simp_expr_unambig4.smt2Y (as nil (list Tok))))))
(define-fun-rec grammars/simp_expr_unambig5.smt2lin ((local-x grammars/simp_expr_unambig5.smt2E)) (list Tok) (match local-x (case (grammars/simp_expr_unambig5.smt2Plus local-a local-b) (append (append (grammars/simp_expr_unambig5.smt2linTerm local-a) (cons Pl (as nil (list Tok)))) (grammars/simp_expr_unambig5.smt2lin local-b))) (case (Term local-t) (grammars/simp_expr_unambig5.smt2linTerm local-t))))
(declare-datatypes () ((B2 (SB (SB_0 B2)) (ZB))))
(declare-datatypes () ((grammars/packrat_unambigPackrat.smt2S (grammars/packrat_unambigPackrat.smt2A (A_0 B2)) (grammars/packrat_unambigPackrat.smt2B (B_0 B2)))))
(define-fun-rec linA ((local-x B2)) (list It) (match local-x (case (SB local-a) (append (append (cons tip2015/relaxedprefix_is_prefix_2.smt2A (as nil (list It))) (linA local-a)) (cons tip2015/relaxedprefix_is_prefix_2.smt2B (as nil (list It))))) (case ZB (cons tip2015/relaxedprefix_is_prefix_2.smt2A (cons tip2015/relaxedprefix_is_prefix_2.smt2C (cons tip2015/relaxedprefix_is_prefix_2.smt2B (as nil (list It))))))))
(define-fun-rec linB ((local-x B2)) (list It) (match local-x (case (SB local-b) (append (append (cons tip2015/relaxedprefix_is_prefix_2.smt2A (as nil (list It))) (linB local-b)) (cons tip2015/relaxedprefix_is_prefix_2.smt2B (cons tip2015/relaxedprefix_is_prefix_2.smt2B (as nil (list It)))))) (case ZB (cons tip2015/relaxedprefix_is_prefix_2.smt2A (cons tip2015/relaxedprefix_is_prefix_2.smt2C (cons tip2015/relaxedprefix_is_prefix_2.smt2B (cons tip2015/relaxedprefix_is_prefix_2.smt2B (as nil (list It)))))))))
(define-fun linS ((local-x grammars/packrat_unambigPackrat.smt2S)) (list It) (match local-x (case (grammars/packrat_unambigPackrat.smt2A local-a) (linA local-a)) (case (grammars/packrat_unambigPackrat.smt2B local-b) (linB local-b))))
(define-fun-rec grammars/simp_expr_unambig2.smt2lin ((local-x grammars/simp_expr_unambig4.smt2E)) (list Tok) (match local-x (case (grammars/simp_expr_unambig4.smt2Plus local-a local-b) (append (append (append (append (cons grammars/simp_expr_unambig4.smt2C (as nil (list Tok))) (grammars/simp_expr_unambig2.smt2lin local-a)) (cons grammars/simp_expr_unambig4.smt2D (cons Pl (cons grammars/simp_expr_unambig4.smt2C (as nil (list Tok)))))) (grammars/simp_expr_unambig2.smt2lin local-b)) (cons grammars/simp_expr_unambig4.smt2D (as nil (list Tok))))) (case EX (cons grammars/simp_expr_unambig4.smt2X (as nil (list Tok)))) (case EY (cons grammars/simp_expr_unambig4.smt2Y (as nil (list Tok))))))
(define-fun-rec grammars/simp_expr_unambig1.smt2lin ((local-x grammars/simp_expr_unambig4.smt2E)) (list Tok) (match local-x (case (grammars/simp_expr_unambig4.smt2Plus local-a local-b) (append (append (append (append (cons grammars/simp_expr_unambig4.smt2C (as nil (list Tok))) (grammars/simp_expr_unambig1.smt2lin local-a)) (cons Pl (as nil (list Tok)))) (grammars/simp_expr_unambig1.smt2lin local-b)) (cons grammars/simp_expr_unambig4.smt2D (as nil (list Tok))))) (case EX (cons grammars/simp_expr_unambig4.smt2X (as nil (list Tok)))) (case EY (cons grammars/simp_expr_unambig4.smt2Y (as nil (list Tok))))))
(define-fun-rec grammars/simp_expr_unambig3.smt2lin ((local-x grammars/simp_expr_unambig4.smt2E)) (list Tok) (match local-x (case (grammars/simp_expr_unambig4.smt2Plus local-a local-b) (append (append (append (cons grammars/simp_expr_unambig4.smt2C (as nil (list Tok))) (grammars/simp_expr_unambig3.smt2lin local-a)) (cons grammars/simp_expr_unambig4.smt2D (cons Pl (as nil (list Tok))))) (grammars/simp_expr_unambig3.smt2lin local-b))) (case EX (cons grammars/simp_expr_unambig4.smt2X (as nil (list Tok)))) (case EY (cons grammars/simp_expr_unambig4.smt2Y (as nil (list Tok))))))
(define-fun-rec (par (local-a) (butlast ((local-x (list local-a))) (list local-a) (match local-x (case nil (as nil (list local-a))) (case (cons local-y local-z) (match local-z (case nil (as nil (list local-a))) (case (cons local-x2 local-x3) (cons local-y (butlast local-z)))))))))
(define-fun (par (local-a) (butlastConcat ((local-x (list local-a)) (local-y (list local-a))) (list local-a) (match local-y (case nil (butlast local-x)) (case (cons local-z local-x2) (append local-x (butlast local-y)))))))
(define-fun-rec ins1 ((local-x Nat) (local-y (list Nat))) (list Nat) (match local-y (case nil (cons local-x (as nil (list Nat)))) (case (cons local-z local-xs) (ite (equal local-x local-z) local-y (cons local-z (ins1 local-x local-xs))))))
(define-fun-rec (par (local-a local-b) (zip ((local-x (list local-a)) (local-y (list local-b))) (list (Pair local-a local-b)) (match local-x (case nil (as nil (list (Pair local-a local-b)))) (case (cons local-z local-x2) (match local-y (case nil (as nil (list (Pair local-a local-b)))) (case (cons local-x3 local-x4) (cons (Pair2 local-z local-x3) (zip local-x2 local-x4)))))))))
(define-fun-rec last ((local-x (list Nat))) Nat (match local-x (case nil Z) (case (cons local-y local-z) (match local-z (case nil local-y) (case (cons local-x2 local-x3) (last local-z))))))
(define-fun (par (local-a local-b) (zipConcat ((local-x local-a) (local-y (list local-a)) (local-z (list local-b))) (list (Pair local-a local-b)) (match local-z (case nil (as nil (list (Pair local-a local-b)))) (case (cons local-y2 local-ys) (cons (Pair2 local-x local-y2) (zip local-y local-ys)))))))
(define-fun-rec ins ((local-x Nat) (local-y (list Nat))) (list Nat) (match local-y (case nil (cons local-x (as nil (list Nat)))) (case (cons local-z local-xs) (ite (lt local-x local-z) (cons local-x local-y) (cons local-z (ins local-x local-xs))))))
(define-fun lastOfTwo ((local-x (list Nat)) (local-y (list Nat))) Nat (match local-y (case nil (last local-x)) (case (cons local-z local-x2) (last local-y))))
(declare-datatypes (local-a) ((isaplanner/prop_47.smt2Tree (Leaf) (isaplanner/prop_47.smt2Node (isaplanner/prop_47.smt2Node_0 (isaplanner/prop_47.smt2Tree local-a)) (isaplanner/prop_47.smt2Node_1 local-a) (isaplanner/prop_47.smt2Node_2 (isaplanner/prop_47.smt2Tree local-a))))))
(define-fun-rec (par (local-a) (mirror ((local-x (isaplanner/prop_47.smt2Tree local-a))) (isaplanner/prop_47.smt2Tree local-a) (match local-x (case Leaf (as Leaf (isaplanner/prop_47.smt2Tree local-a))) (case (isaplanner/prop_47.smt2Node local-l local-y local-r) (isaplanner/prop_47.smt2Node (mirror local-r) local-y (mirror local-l)))))))
(define-fun-rec (par (local-a) (height ((local-x (isaplanner/prop_47.smt2Tree local-a))) Nat (match local-x (case Leaf Z) (case (isaplanner/prop_47.smt2Node local-l local-y local-r) (prod/prop_14.smt2S (max2 (height local-l) (height local-r))))))))
(define-fun-rec (par (local-a) (takeWhile ((local-x (=> local-a Bool)) (local-y (list local-a))) (list local-a) (match local-y (case nil (as nil (list local-a))) (case (cons local-z local-xs) (ite (@ local-x local-z) (cons local-z (takeWhile local-x local-xs)) (as nil (list local-a))))))))
(define-fun-rec (par (local-a) (dropWhile ((local-x (=> local-a Bool)) (local-y (list local-a))) (list local-a) (match local-y (case nil (as nil (list local-a))) (case (cons local-z local-xs) (ite (@ local-x local-z) (dropWhile local-x local-xs) local-y))))))
(check-sat)
