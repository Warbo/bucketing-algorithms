# explore-theores #

## About ##

Perform theory exploration on sets of Haskell functions. The functions should be
in JSON format, like the following:

    [[{"package" : "text",
        "module" : "Data.Text",
          "name" : "length",
         "arity" : 1,
          "type" : "Data.Text.Text -> Int"},
      {"package" : "containers",
       ...}
      ...],
     [...],
     ...]

If we simplify the function-describing objects to names like 'f1', 'f2', etc.
then an input like '[[f1, f2, f3], [f4, f5]]' denotes that combinations of the
functions 'f1', 'f2' and 'f3' should be explored; and, separately, that
combinations of the functions 'f4' and 'f5' should be explored. Any non-zero
number of functions can be given in each set, and any non-zero number of sets
can be given.

The fields shown above should suffice to describe each function. Under the hood,
we pass this data to the MLSpec program, so you may want to consult its
documentation as well.

The main reason to use explore-theories, rather than directly using MLSpec, is
that we can avoid unnecessary delays by ensuring all required Haskell packages
are available before exploration begins. If any packages *aren't* available,
MLSpec will use the Nix package manager to install them into an isolated
environment; however, this can be quite slow, and will be repeated for each set
of functions to explore. explore-theories only needs to invoke Nix once (if at
all), so MLSpec can proceed without any further delay.

## Files ##

### `build-env` ###

Takes a list of Haskell packages from `ENVIRONMENT_PACKAGES`, and a command to
run as its argument(s). If all of the given packages are already available, the
given command is executed (inheriting stdio). If some of the given packages
aren't available, a new environment is instantiated, and the command is executed
inside that.

You should not have to run this directly, although it can be handy to speed up
some nix-invoking loops.

### `explore-theories` ###

This is our main executable, which accepts the JSON described above as its
stdin. It uses `build-env` to execute MLSpec in an appropriate environment.

### `extra-haskell-packages` ###

A helper script which outputs any Haskell packages required by MLSpec.

### `extra-packages` ###

A helper script which outputs any Nix packages required by MLSpec.

### `path-to-front` ###

A workaround for buggy environments. Sometimes, due to nesting, the binary
directory of an environment may not appear at the head of the `PATH` variable.

This can cause us to invoke the wrong instance of GHC, which doesn't have the
correct packages available. This script will check for and correct this problem.

### `test.sh` ###

Test suite. To make tests faster, you can avoid repeated Nix invocations by
running it via `build-env`, using the output of `extra-haskell-packages` plus
the `list-extras` package (which is used by the test data) as the
`ENVIRONMENT_PACKAGES`.
