{
    "asts.time_asts": {
        "code": "def time_asts(size):\n    key = str(size)\n    for rep in samples[key]:\n        run_on([cmd], samples[key][rep])\n",
        "goal_time": 0.1,
        "name": "asts.time_asts",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "5",
                "10",
                "15",
                "20"
            ]
        ],
        "pretty_name": "asts.time_asts",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "warmup_time": -1
    },
    "dedupe.time_dedupe": {
        "code": "def time_dedupe(size):\n    key = str(size)\n    for rep in samples[key]:\n        run_on([cmd], samples[key][rep])\n",
        "goal_time": 0.1,
        "name": "dedupe.time_dedupe",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "5",
                "10",
                "15",
                "20"
            ]
        ],
        "pretty_name": "dedupe.time_dedupe",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "warmup_time": -1
    },
    "groundtruths.time_groundtruths": {
        "code": "def time_groundtruths(size):\n    key = str(size)\n    for rep in samples[key]:\n        run_on([cmd], samples[key][rep])\n",
        "goal_time": 0.1,
        "name": "groundtruths.time_groundtruths",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "5",
                "10",
                "15",
                "20"
            ]
        ],
        "pretty_name": "groundtruths.time_groundtruths",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "warmup_time": -1
    },
    "hashing.time_hashing": {
        "code": "def time_hashing(size):\n    key = str(size)\n    for rep in samples[key]:\n        run_on([cmd], samples[key][rep])\n",
        "goal_time": 0.1,
        "name": "hashing.time_hashing",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "5",
                "10",
                "15",
                "20"
            ]
        ],
        "pretty_name": "hashing.time_hashing",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "warmup_time": -1
    },
    "issues.track_issues": {
        "code": "def track_issues():\n    issues = join(getenv('root'), '.issues')\n    count  = 0\n    for i in contents(issues):\n        fixed = False\n        # Loop through new, cur and tmp\n        for d in contents(issues, i):\n            # One message will be the \"root\" with metadata stored in its headers\n            for msg in contents(issues, i, d):\n                content = u''\n                with open(join(issues, i, d, msg), 'r') as f:\n                    content = f.read().decode('utf-8')\n                for line in content.split('\\n'):\n                    if line.startswith('resolution:') and 'fixed' in line:\n                        fixed = True\n        if not fixed:\n            count += 1\n\n    return count\n",
        "name": "issues.track_issues",
        "param_names": [],
        "params": [],
        "pretty_name": "issues.track_issues",
        "timeout": 60.0,
        "type": "track",
        "unit": "issues"
    },
    "recurrent.time_recurrent": {
        "code": "def time_recurrent(size):\n    key = str(size)\n    rep = sorted(samples[key].keys())[0]\n    #for rep in samples[key]:\n    run_on(['strace', '-c', '-f', cmd], samples[key][rep])\n",
        "goal_time": 0.1,
        "name": "recurrent.time_recurrent",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "5",
                "10",
                "15",
                "20"
            ]
        ],
        "pretty_name": "recurrent.time_recurrent",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "warmup_time": -1
    },
    "version": 1
}