{
    "benchmarks.track_precision": {
        "code": "def track_precision(cache, rep, size):\n    '''Run QuickSpec and calculate precision of the result.'''\n    #cache[size][rep]\n    stderr.write(repr(cache))\n    return 1\n", 
        "name": "benchmarks.track_precision", 
        "param_names": [
            "rep", 
            "size"
        ], 
        "params": [
            [
                "0", 
                "1"
            ], 
            [
                "1", 
                "2"
            ]
        ], 
        "pretty_name": "benchmarks.track_precision", 
        "setup_cache_key": "/home/chris/Programming/haskell-te/benchmarks/benchmarks.py:33", 
        "setup_cache_timeout": 3600, 
        "timeout": 60.0, 
        "type": "track", 
        "unit": "unit"
    }, 
    "benchmarks.track_sample": {
        "code": "def track_sample(cache, rep, size):\n    return []\n", 
        "name": "benchmarks.track_sample", 
        "param_names": [
            "rep", 
            "size"
        ], 
        "params": [
            [
                "0", 
                "1"
            ], 
            [
                "1", 
                "2"
            ]
        ], 
        "pretty_name": "benchmarks.track_sample", 
        "setup_cache_key": "/home/chris/Programming/haskell-te/benchmarks/benchmarks.py:33", 
        "setup_cache_timeout": 3600, 
        "timeout": 60.0, 
        "type": "track", 
        "unit": "unit"
    }, 
    "benchmarks.track_stdout": {
        "code": "def track_stdout(cache, rep, size):\n    '''Return the raw stdout, so we can store it in git.'''\n    return cached(cache, size, rep)['stdout']\n", 
        "name": "benchmarks.track_stdout", 
        "param_names": [
            "rep", 
            "size"
        ], 
        "params": [
            [
                "0", 
                "1"
            ], 
            [
                "1", 
                "2"
            ]
        ], 
        "pretty_name": "benchmarks.track_stdout", 
        "setup_cache_key": "/home/chris/Programming/haskell-te/benchmarks/benchmarks.py:33", 
        "setup_cache_timeout": 3600, 
        "timeout": 60.0, 
        "type": "track", 
        "unit": "unit"
    }, 
    "benchmarks.track_time": {
        "code": "def track_time(cache, rep, size):\n    return cached(cache, size, rep)['time']\n", 
        "name": "benchmarks.track_time", 
        "param_names": [
            "rep", 
            "size"
        ], 
        "params": [
            [
                "0", 
                "1"
            ], 
            [
                "1", 
                "2"
            ]
        ], 
        "pretty_name": "benchmarks.track_time", 
        "setup_cache_key": "/home/chris/Programming/haskell-te/benchmarks/benchmarks.py:33", 
        "setup_cache_timeout": 3600, 
        "timeout": 60.0, 
        "type": "track", 
        "unit": "unit"
    }, 
    "version": 1
}